# -*- coding: utf-8 -*-
import vk_api
import dropbox
import requests
import bs4
import datetime
import random
import json
import time
import os.path

def res():
    return time.strftime("%x %X", time.localtime())

ver = "\n\nv0.8 –æ—Ç 30.05.2021 00:15 –ú–°–ö"
users = next(os.walk("json"))[2]
token = "2d26f19312dd93258ca84a1c533fefb1cffbb3a9d63d775e78ae3c62bd4254806825bdf2af924f8408d78"
vk = vk_api.VkApi(token=token)
vk._auth_token()

admins = [419760643]
moders = [361585264, 190114998, 418333599]

def log(id, body):
    with open('log.txt', 'a', encoding='utf-8') as f:
        f.writelines("\n[" + res() + "] " + str(id) + " " + str(body) + " | –£—Å–ø–µ—à–Ω–æ!")

def glog():
    with open('log.txt', 'rb') as file:
        dbx = dropbox.Dropbox('sl.Axy0arIQI0-ksrw2NAfzT5y53mSeczQPAEcSgWaD1P5M_6OodpSySF6FiFbUHsgKiu1-VCUV4cSCk_FRLakKwcOosksJP86dIyoUYYeGdnLitQfveDPqLLvmeagECbqdxcAmYIONP8X6')
        r = dbx.files_delete_v2('/log.txt')
        if 'UploadWriteFailed(reason=WriteError(' in str(r):
            r = dbx.files_upload(file.read(), '/log.txt')
            l = dbx.sharing_create_shared_link('/log.txt')
            return l
        else:
            r = dbx.files_upload(file.read(), '/log.txt')
            l = dbx.sharing_create_shared_link('/log.txt')
            return l

def ifstaff(id):
    if id in admins or id in moders:
        if id in admins:
            return '‚úÖ | –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
        if id in moders:
            return '‚úÖ | –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä'
    else:
        return 'üö´'

def prof(id):
    x = {
        "id": id,
        "balance": 1000,
        "nick": "",
        "kwin": 0,
        "klose": 0,
        "mwin": 0,
        "mlose": 0,
        "reg": res()
    }
    try:
        with open('json/' + str(id) + '.json') as f:
            ff = json.loads(f.read())
    except:
        with open('json/' + str(id) + '.json', 'w') as f:
            f.write(json.dumps(x, indent=4))
        with open('json/' + str(id) + '.json') as f:
            ff = json.loads(f.read())
        return 'üí¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∏–∂—É —Ç—ã –∑–¥–µ—Å—å –Ω–æ–≤–µ–Ω—å–∫–∏–π, –∏—Å–ø–æ–ª—å–∑—É–π "—Ö–µ–ª–ø" –¥–ª—è –ø–æ–º–æ—â–∏ –∏ —Ä–∞–∑–≤–ª–µ–∫–∞–π—Å—è!\nüí≤ –ê –µ—â–µ,–¥–µ—Ä–∂–∏ —Å–≤–æ–π –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ 1000$'

    return '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n' + 'üîé id: ' + str(ff["id"]) + '\nüìã –ù–∏–∫: ' + str(ff["nick"]) + '\nüí∞ –ë–∞–ª–∞–Ω—Å: ' + str(ff["balance"]) + '\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ' + str(len(users)) + '\nüëî –í—ã –ø–µ—Ä—Å–æ–Ω–∞–ª: ' + ifstaff(id) + '\n\nüìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ' + str(ff["reg"]) + ver

def dprof(idd):
    with open('json/' + str(idd) + '.json') as f:
        ff = json.loads(f.read())

    return '–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: vk.com/id' + idd +'\nüîé id: ' + str(ff["id"]) + '\nüìã –ù–∏–∫: ' + str(ff["nick"]) + '\nüí∞ –ë–∞–ª–∞–Ω—Å: ' + str(ff["balance"]) + '\nüëî –ü–µ—Ä—Å–æ–Ω–∞–ª: ' + ifstaff(idd) + '\n\nüìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ' + str(ff["reg"])

def nick(id, nick):
    if len(nick) <= 15:
        with open('json/' + str(id) + '.json', encoding='utf-8') as f:
            ff = json.loads(f.read())
        ff["nick"] = nick
        with open('json/' + str(id) + '.json', 'w', encoding='utf-8') as f:
            f.write(json.dumps(ff, indent=4))
        return "–¢–µ–ø–µ—Ä—å –≤–∞—à –Ω–∏–∫: " + nick
    else:
        return "–í–∞—à –Ω–∏–∫ –±–æ–ª—å—à–µ 15 —Å–∏–º–≤–æ–ª–æ–≤!"

def dnick(id, nick):
    if len(nick) <= 15:
        with open('json/' + str(id) + '.json') as f:
            ff = json.loads(f.read())
        ff["nick"] = nick
        with open('json/' + str(id) + '.json', 'w') as f:
            f.write(json.dumps(ff, indent=4))
        return "–ù–∏–∫ " + id + " —Ç–µ–ø–µ—Ä—å: " + str(ff["nick"])
    else:
        return "–ù–∏–∫ –±–æ–ª—å—à–µ 15 —Å–∏–º–≤–æ–ª–æ–≤!"

def bal(id):
    with open('json/' + str(id) + '.json') as f:
        ff = json.loads(f.read())
    return 'üí∞–í–∞—à –±–∞–ª–∞–Ω—Å: ' + str(ff["balance"]) + "$"

def cbal(id,val):
    if int(val) > 0 and int(val) < 1000000000:
            with open('json/' + str(id) + '.json') as f:
                ff = json.loads(f.read())
            try:
                ff["balance"] = int(val)
            except:
                return "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!"

            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            return "–¢–µ–ø–µ—Ä—å –≤–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"])
    else:
        return "–í—ã –≤–≤–µ–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—å—à–µ –Ω—É–ª—è –∏–ª–∏ –±–æ–ª—å—à–µ 1 000 000 000"

def dbal (idd,val):
    if int(val) > 0 and int(val) < 1000000000:
        with open('json/' + str(idd) + '.json') as f:
            ff = json.loads(f.read())
        try:
            ff["balance"] = int(val)
        except:
            return "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!"

        with open('json/' + str(idd) + '.json', 'w') as f:
            f.write(json.dumps(ff, indent=4))
        return "–¢–µ–ø–µ—Ä—å –±–∞–ª–∞–Ω—Å " + idd + ": " + str(ff["balance"])
    else:
        return "–í—ã –≤–≤–µ–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—å—à–µ –Ω—É–ª—è –∏–ª–∏ –±–æ–ª—å—à–µ 1 000 000 000"

def pay(id, idd, val):
    with open('json/' + str(id) + '.json', encoding='utf-8') as f:
        per = json.loads(f.read())
    try:
        with open('json/' + str(idd) + '.json', encoding='utf-8') as f:
            pol = json.loads(f.read())
    except:
        return "–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"

    if int(val) > 0 and int(val) <= per["balance"]:
        per["balance"] -= int(val)
        pol["balance"] += int(val)
        with open('json/' + str(id) + '.json', 'w', encoding='utf-8') as f:
            f.write(json.dumps(per, indent=4))
        with open('json/' + str(idd) + '.json', 'w', encoding='utf-8') as f:
            f.write(json.dumps(pol, indent=4))
        if per["nick"] == '':
            vk.method("messages.send", {"peer_id": idd,
                                "message": "–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç " + str(id) + " –≤ —Ä–∞–∑–º–µ—Ä–µ: " + val + "$",
                                "random_id": random.randint(1, 2147483647)})
        else:
            vk.method("messages.send", {"peer_id": idd,
                                "message": "–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç " + per["nick"] + " –≤ —Ä–∞–∑–º–µ—Ä–µ: " + val + "$",
                                "random_id": random.randint(1, 2147483647)})
        return "–ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω! –í–∞—à –±–∞–ª–∞–Ω—Å: " + str(per["balance"]) + "$"
    else:
        return "–°—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –≤–∞—à –±–∞–ª–∞–Ω—Å/–°—É–º–º–∞ –º–µ–Ω—å—à–µ 0"

def ulist():
    c=1
    path = "json/"
    f=os.listdir(path)
    for i in range (len(f)):
        f[i] = '[' + str(c) + '] ' + "vk.com/id" + str(f[i][:-5])
        c += 1
    a = '\n'.join(f)
    return "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n" + a

def kaz(id,amount):
    with open('json/' + str(id) + '.json') as f:
        ff = json.loads(f.read())
    if int(amount) <= ff["balance"] and int(amount) > 0:
        r = random.randrange(0,7)
        if r == 0 or r == 1 or r == 2 or r == 3:
            ff["balance"] -= int(amount)
            ff["klose"] += int(round(int(amount)))
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))

            return "üö´–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –≤—Å—é —Å—Ç–∞–≤–∫—É!\nüí∞–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"
        elif r == 4:
            win = int(amount)*1.5
            ff["balance"] += int(round(win))
            ff["kwin"] += int(round(win))
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))

            return "‚úÖ–í—ã –≤—ã–π–≥—Ä–∞–ª–∏: " + str(int(win)) + "$ (1.5x)" + "\nüí∞–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"
        elif r == 5:
            win = int(amount) * 2
            ff["balance"] += int(round(win))
            ff["kwin"] += int(round(win))
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))

            return "‚úÖ–í—ã –≤—ã–π–≥—Ä–∞–ª–∏: " + str(int(win)) + "$ (2x)" + "\nüí∞–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"
        elif r == 6:
            win = int(amount) * 5
            ff["balance"] += int(round(win))
            ff["kwin"] += int(round(win))
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))

            return "‚úÖ–í—ã –≤—ã–π–≥—Ä–∞–ª–∏: " + str(int(win)) + "$ (5x)" + "\nüí∞–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"
    else:
        return "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –∏–ª–∏ —Å—É–º–º–∞ –º–µ–Ω—å—à–µ 0!"

def monetka(id,amount):
    with open('json/' + str(id) + '.json') as f:
        ff = json.loads(f.read())
    if int(amount) <= ff["balance"] and int(amount) > 0:
        r = random.randrange(0, 2)
        if r == 0:
            ff["balance"] -= int(amount)
            ff["mlose"] += int(amount)
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            return "üö´–í—ã–ø–∞–ª–∞ —Ä–µ—à–∫–∞,–≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!" + "\nüí∞–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"
        elif r == 1:
            win = int(amount) * 3
            ff["balance"] += int(round(win))
            ff["mwin"] += int(round(win))
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
        return "‚úÖ–í—ã –≤—ã–π–≥—Ä–∞–ª–∏,–≤—ã–ø–∞–ª –û—Ä–µ–ª: " + str(int(win)) + "$ (3x)" + "\nüí∞–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"
    else:
        return "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –∏–ª–∏ —Å—É–º–º–∞ –º–µ–Ω—å—à–µ 0!"

def staff():
    return '–°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞\n\n' + '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n' + '@gamtz (–í–ª–∞–¥ –ë–æ–≥–¥–∞–Ω–æ–≤)\n\n' + '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã:\n @lymar1 (–ê–ª–µ–∫—Å–µ–π –õ—ã–º–∞—Ä)\n@plz_helpme_die (–î–µ–Ω–∏—Å –®–≤–µ—Ü)\n@yatox1c (–ï—Ñ–∏–º –ï—Ñ–∏–º–µ–Ω–∫–æ)'

def help():
    return "üìö –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã\n&#12288;üìñ –ü—Ä–æ—Ñ–∏–ª—å/–ü—Ä–æ—Ñ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n&#12288;üí≤ –ë–∞–ª–∞–Ω—Å/–ë–∞–ª - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å\n&#12288;ü§ù –ü–µ—Ä–µ–¥–∞—Ç—å {id} {—Å—É–º–º–∞} - –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω–µ–≥ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É\n&#12288;üìã –°–Ω–∏–∫ {–Ω–∏–∫} - –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –Ω–∏–∫\n&#12288;üìä –°—Ç–∞—Ç–∞ - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –∏–≥—Ä–∞–º\n&#12288;üëî Staff/–ê–¥–º–∏–Ω—ã/–ú–æ–¥–µ—Ä—ã - —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ " \
           "\n\nüéâ–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã\n&#12288;üé∞ –ö–∞–∑–∏–Ω–æ/–ö–∞–∑–∏–∫ {—Å—É–º–º–∞} - –ø–æ–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –≤ –∫–∞–∑–∏–Ω–æ\n&#12288;ü¶Ö –ú–æ–Ω–µ—Ç–∫–∞ {—Å—É–º–º–∞} - flip! –ü–æ–¥–±—Ä–æ—Å—å –º–æ–Ω–µ—Ç–∫—É\n&#12288;ü§£ –ê–Ω–µ–∫–¥–æ—Ç - –Ω—É –ø—Ä–æ—Å—Ç–æ –∞–Ω–µ–∫–¥–æ—Ç (–•–∞-–•–∞)\n&#12288;üìΩ –§–∏–ª—å–º - —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –∏–∑ kinopoisk\n&#12288;üî´ –ö—Ç–∞—Ç–∞ {nick} {id} - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ COD:Warzone –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è\n&#12288;üî´ –ö—Å—Ç–∞—Ç20 {nick} {id} - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ COD:Warzone –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –º–∞—Ç—á–µ–π " \
           "\n\nüìï –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞\n&#12288;üí∏ —Å–±–∞–ª {—Å—É–º–º–∞} - –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —Å–µ–±–µ (–æ—Ç –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞)\n&#12288;üí≥ –¥–±–∞–ª {id} {—Å—É–º–º–∞} - –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É (–æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)\n&#12288;üë§ –î–ø—Ä–æ—Ñ {id} - –ø—Ä–æ—Å–º–æ—Ç—Ä —á—É–∂–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è (–æ—Ç –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞)\n&#12288;‚úí –î–Ω–∏–∫ {id} {–Ω–∏–∫} - –∏–∑–º–µ–Ω–∏—Ç—å —á—É–∂–æ–π –Ω–∏–∫ (–æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)\n&#12288;üë• Users - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ—Ç –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞)" \
           "\n&#12288;üìÑ –õ–æ–≥–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ (–æ—Ç –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞)"

def gstats(id):
    with open('json/' + str(id) + '.json') as f:
        ff = json.loads(f.read())
    twin = ff["kwin"] + ff["mwin"]
    tlose = ff["klose"] + ff["mlose"]
    return "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º\n\nüé∞ –ö–∞–∑–∏–Ω–æ\n&#12288;üìà –í—Å–µ–≥–æ –≤—ã–∏–≥—Ä–∞–Ω–æ –≤ –∫–∞–∑–∏–Ω–æ: " + str(ff["kwin"]) + "$" + " \n&#12288;üìâ –í—Å–µ–≥–æ –ø—Ä–æ–∏–≥—Ä–∞–Ω–æ –≤ –∫–∞–∑–∏–Ω–æ: " + str(ff["klose"]) + "$" + "\nü¶Ö –ú–æ–Ω–µ—Ç–∫–∞\n&#12288;üìà –í—Å–µ–≥–æ –≤—ã–∏–≥—Ä–∞–Ω–æ –≤ –º–æ–Ω–µ—Ç–∫–µ: " + str(ff["mwin"]) + "$" + " \n&#12288;üìâ –í—Å–µ–≥–æ –ø—Ä–æ–∏–≥—Ä–∞–Ω–æ –≤ –º–æ–Ω–µ—Ç–∫–µ: " + str(ff["mlose"]) + "$" + " \n\nüìà–í—Å–µ–≥–æ –≤—ã–∏–≥—Ä–∞–Ω–æ: " + str(twin) + "$" + " \nüìâ–í—Å–µ–≥–æ –ø—Ä–æ–∏–≥—Ä–∞–Ω–æ: " + str(tlose) + "$"

def getanekdot():
    z = ''
    s = requests.get('http://anekdotme.ru/random')
    b = bs4.BeautifulSoup(s.text, "html.parser")
    p = b.select('.anekdot_text')
    for x in p:
        s = (x.getText().strip())
        z = z + s + '\n\n'
    return s

def stats2(nick, idd):
    url = "https://call-of-duty-modern-warfare.p.rapidapi.com/multiplayer/" + nick + "%23" + idd + "/battle"

    headers = {
        'x-rapidapi-key': "3d7ffcf6eemsheb0b038baa4b97ep118126jsnd220b4b88e25",
        'x-rapidapi-host': "call-of-duty-modern-warfare.p.rapidapi.com",
    }
    time.sleep(1)
    response = requests.request("GET", url, headers=headers)
    r = str(response.text).split(",")
    p=["level", "levelXpRemainder", "levelXpGained", "prestige"]
    a=[]
    b=[]
    c=0
    for i in range (len(r)):
        for j in range(len(p)):
            if p[j] in r[i+c] and p[j] not in a:
                a.append(i)
                ++c
                break
    a = a[0:(len(p))]
    a = list(map(int, a))
    for i in range (len(a)):
        b.append(r[a[i]])
    if len(r) > 3:
        #level
        lvl = "\nüè∑–£—Ä–æ–≤–µ–Ω—å: " + b[0][8:]
        #prestige
        pr = "\nüî∞–ü—Ä–µ—Å—Ç–∏–∂: " + b[3][11:]
        #lvlxp
        lvlxp = "\nüìã–ü—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–≤–Ω—è: " + b[1][19:] + "/" + b[2][16:] + "\n"
        stat2 = lvl + pr + lvlxp
        return stat2
    else:
        return 0

def stats(nick, idd):
    url = "https://call-of-duty-modern-warfare.p.rapidapi.com/warzone/" + nick + "%23" + idd + "/battle"

    headers = {
        'x-rapidapi-key': "3d7ffcf6eemsheb0b038baa4b97ep118126jsnd220b4b88e25",
        'x-rapidapi-host': "call-of-duty-modern-warfare.p.rapidapi.com",
    }

    response = requests.request("GET", url, headers=headers)
    r = str(response.text).split(",")
    if len(r) > 3:
        # WINS
        wins = "\nüéâ–ü–æ–±–µ–¥: " + r[0][14:999]
        # KILLS
        kills = "\nü•¥–£–±–∏–π—Å—Ç–≤: " + r[1][8:999]
        # KD
        kd = "\nüìà–ö/–î: " + r[2][10:14]
        # DEATHS
        deaths = "\n‚ò†–°–º–µ—Ä—Ç–µ–π: " + r[15][9:999]
        # top25
        top25 = "\n2Ô∏è‚É£5Ô∏è‚É£–¢–æ–ø-25: " + r[4][16:999]
        # top10
        top10 = "\n1Ô∏è‚É£0Ô∏è‚É£–¢–æ–ø-10: " + r[5][9:999]
        # contracts
        contracts = "\nüéü–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã: " + r[6][12:999]
        # revives
        revives = "\n‚ûï–ü–æ–¥–Ω—è—Ç–∏–π: " + r[7][10:999]
        # DOWNS
        downs = "\nüîª–ù–æ–∫–¥–∞—É–Ω—ã: " + r[3][8:999]
        # top5
        top5 = "\n5Ô∏è‚É£–¢–æ–ø-5: " + r[8][10:999]
        # matches
        matches = "\n\n‚å®–í—Å–µ–≥–æ –∏–≥—Ä: " + r[11][14:999]
        # score
        score = "\nüí°–í—Å–µ–≥–æ EXP: " + r[9][8:999]
        # scorePM
        spm = r[13][17:999]
        sppm = round(float(spm))
        scorePM = "\nüéõEXP –≤ –º–∏–Ω—É—Ç—É: " + str(sppm)
        # timeplayed
        ttt = (datetime.timedelta(seconds=int(r[10][13:999])))
        totaltime = "\nüíª–í—Å–µ–≥–æ –æ—Ç—ã–≥—Ä–∞–Ω–æ –≤—Ä–µ–º–µ–Ω–∏: " + str(ttt)
        # avgkills
        avgk = int(r[1][8:999]) / int(r[11][14:999])
        avgkills = "\nüòµ–°—Ä.–£–±–∏–π—Å—Ç–≤: " + str(round(avgk, 2))
        stat = "üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ " + nick + "#" + idd + matches + "\n" + kills + avgkills + "\n" + downs + revives + "\n" + deaths + "\n" + kd + "\n" + wins + "\n" + score + scorePM + contracts + "\n" + stats2(nick, idd) + top5 + top10 + top25 + "\n" + totaltime + "\n\nby @gamtz" + ver
        vk.method("messages.send", {"peer_id": id, "message": stat, "random_id": random.randint(1, 2147483647)})
    else:
        vk.method("messages.send", {"peer_id": id,
                                    "message": "‚ö†–û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∏–∫ –∏ id‚ö†\n–¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ "
                                               "–ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ —Å—Ç–∞—Ç—å–µ: vk.com/@cod_stats-help",
                                    "random_id": random.randint(1, 2147483647)})

def stats20(nick, idd):
    a = []
    p = ["kills", "headshots", "killsPerGame", "headshotPercentage", "objectiveTeamWiped", "assists", "deaths",
         "kdRatio", "score", "scorePerMinute", "gulagKills", "gulagDeaths", "damageDone", "damageTaken",
         "distanceTraveled", "avgLifeTime", "timePlayed"]
    url = "https://call-of-duty-modern-warfare.p.rapidapi.com/warzone-matches/" + nick + "%23" + idd + "/battle"
    headers = {
        'x-rapidapi-key': "3d7ffcf6eemsheb0b038baa4b97ep118126jsnd220b4b88e25",
        'x-rapidapi-host': "call-of-duty-modern-warfare.p.rapidapi.com"
    }
    response = requests.request("GET", url, headers=headers)
    r = str(response.text).split(",")
    c = 0
    for i in range(len(r)):
        for j in range(len(p)):
            if p[j] in r[i + c] and p[j] not in a:
                a.append(i)
                var = ++c
                break
    a = a[0:(len(p))]
    a = list(map(int, a))
    if len(r) > 3:
        #    kills
        kills = "\n\nü•¥–£–±–∏–π—Å—Ç–≤: " + r[a[0]][27:999]
        #    fsquad
        fsquad = "\nüë•–°–∫–≤–∞–¥–æ–≤ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–æ: " + r[a[1]][21:999]
        #    avglife
        if round(float(r[a[2]][14:999])) > 0:
            avgl = round(float(r[a[2]][14:999]))
            avglife = "\n‚åõ–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏: " + str((datetime.timedelta(seconds=int(avgl))))
        else:
            avglife = "\n‚åõ–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏: " + "‚ö†C—ã–≥—Ä–∞–π—Ç–µ –±–æ–ª—å—à–µ –∏–≥—Ä‚ö†"
        #    score
        score = "\nüí°–í—Å–µ–≥–æ exp: " + r[a[3]][8:999]
        #    hs
        hs = "\nüíÄ–£–±–∏–π—Å—Ç–≤–∞ –≤ –≥–æ–ª–æ–≤—É: " + r[a[4]][12:999]
        #    assists
        assists = "\n‚ôª–ü–æ–º–æ—â–∏: " + r[a[5]][10:999]
        #    avgkills
        avgkills = "\nüòµ–°—Ä.—É–±–∏–π—Å—Ç–≤: " + r[a[6]][15:999]
        #    scorepm
        if round(float(r[a[7]][17:999])) > 0:
            scorepm = "\nüéõExp –≤ –º–∏–Ω—É—Ç—É: " + str(round(float(r[a[7]][17:999])))
        else:
            scorepm = "\nüéõExp –≤ –º–∏–Ω—É—Ç—É: " + "‚ö†C—ã–≥—Ä–∞–π—Ç–µ –±–æ–ª—å—à–µ –∏–≥—Ä‚ö†"
        #    distance
        distance = "\nüó∫–ü—Ä–æ–π–¥–µ–Ω–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: " + str(round(float(r[a[8]][19:999]) / 100000))
        #    deaths
        deaths = "\n‚ò†–°–º–µ—Ä—Ç–µ–π: " + r[a[9]][9:999]
        #    kd
        kd = "\nüìà–ö/–î: " + str(round(float(r[a[10]][10:999]), 2))
        #    gulagdeaths
        gdeaths = "\nüï≥–°–º–µ—Ä—Ç–µ–π –≤ –≥—É–ª–∞–≥–µ: " + r[a[11]][14:999]
        #    totaltime
        if round(float(r[a[12]][13:999])) > 0:
            tt = round(float(r[a[12]][13:999]))
            totaltime = "\nüíª–í—Å–µ–≥–æ –æ—Ç—ã–≥—Ä–∞–Ω–æ –≤—Ä–µ–º–µ–Ω–∏: " + str((datetime.timedelta(seconds=int(tt))))
        else:
            totaltime = "\nüíª–í—Å–µ–≥–æ –æ—Ç—ã–≥—Ä–∞–Ω–æ –≤—Ä–µ–º–µ–Ω–∏: " + "‚ö†C—ã–≥—Ä–∞–π—Ç–µ –±–æ–ª—å—à–µ –∏–≥—Ä‚ö†"
        #    hsper
        hsper = "\nüß†–ü—Ä–æ—Ü–µ–Ω—Ç —É–±–∏–π—Å—Ç–≤ –≤ –≥–æ–ª–æ–≤—É: " + str(round(float(r[a[13]][21:999]), 2))
        #    gulagkills
        gkills = "\nüëÆ–£–±–∏–π—Å—Ç–≤ –≤ –≥—É–ª–∞–≥–µ: " + r[a[14]][13:999]
        #    damagegive
        gdamage = "\nüî´–ù–∞–Ω–µ—Å–µ–Ω–æ —É—Ä–æ–Ω–∞: " + r[a[15]][13:999]
        #    damagetaken
        td = r[a[16]].split("}")
        tdamage = "\nü•ä–ü–æ–ª—É—á–µ–Ω–æ —É—Ä–æ–Ω–∞: " + td[0][14:999]
        #   gulagkd
        gkd = "\nüìä–ì—É–ª–∞–≥ –ö/–î: " + str(round(float(int(gkills[20:999]) / int(gdeaths[20:999])), 2))

        stat20 = "üìä—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ " + nick + "#" + idd + " –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –º–∞—Ç—á–µ–π" + kills + hs + avgkills + hsper + fsquad + "\n" + assists + "\n" + deaths + "\n" + kd + "\n" + score + scorepm + "\n" + gkills + gdeaths + gkd + "\n" + gdamage + tdamage + "\n" + distance + avglife + totaltime + "\n\nby @gamtz" + ver
        vk.method("messages.send", {"peer_id": id, "message": stat20, "random_id": random.randint(1, 2147483647)})
    else:
        vk.method("messages.send", {"peer_id": id,
                                    "message": "‚ö†–û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∏–∫ –∏ id‚ö†\n–¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ —Å—Ç–∞—Ç—å–µ: vk.com/@cod_stats-help",
                                    "random_id": random.randint(1, 2147483647)})

def uplf(iddd, purl):
    global d
    p = requests.get(purl[1])
    out = open("films/" + iddd + ".jpg", "wb")
    out.write(p.content)
    out.close()

    a = vk.method("photos.getMessagesUploadServer")
    b = requests.post(a['upload_url'], files={'photo': open('films/' + iddd + '.jpg', 'rb')}).json()
    c = vk.method('photos.saveMessagesPhoto', {'photo': b['photo'], 'server': b['server'], 'hash': b['hash']})[0]
    d = "photo{}_{}".format(c["owner_id"], c["id"])

def rfilm():
    global iddd
    iddd = str(random.randrange(1, 99999))
    url = 'https://kinopoiskapiunofficial.tech/api/v2.1/films/' + iddd
    headers = {
        'X-API-KEY': '79e32931-ef2c-4921-9e01-dac1d164971b',
    }
    response = requests.get(url, headers=headers)
    r = str(response.text).split(",")
    p=["nameRu", "webUrl", "posterUrl", "posterUrlPreview", "year"]
    a=[]
    b=[]
    c=0
    for i in range(len(r)):
        for j in range(len(p)):
            if p[j] in r[i+c] and p[j] not in a:
                a.append(i)
                ++c
                break
    a = a[0:(len(p))]
    a = list(map(int, a))
    for i in range(len(a)):
        b.append(r[a[i]])
    #
    name = '–ù–∞–∑–≤–∞–Ω–∏–µ: ' + b[0][9:]
    #
    kkurl = (b[1][9:]).split('"')
    kurl = '–°—Å—ã–ª–∫–∞ –Ω–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫: ' + kkurl[1]
    #
    purl = (b[2][12:]).split('"')
    #
    year = '–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: ' + (b[4][7:])
    res = name + "\n" + year + '\n' + kurl
    uplf (iddd, purl)
    return (res)

def top():
    a=[]
    b=[]
    for i in users:
        with open('json/'+i) as f:
            ff = json.loads(f.read())
            a.append(ff["balance"]) #+ ' ' +  str(ff["id"]))
    a = sorted(a)
    print(a)

print("[" + res() +"] ‚úÖ–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
while True:
    try:
        messages = vk.method("messages.getConversations", {"offset": 0, "count": 20, "filter": "unanswered"})
        if messages["count"] >= 1:
            id = messages["items"][0]["last_message"]["from_id"]
            body = messages["items"][0]["last_message"]["text"]
            if body.lower() == '–ø–∏–Ω–≥':
                vk.method("messages.send", {"peer_id": id,
                                            "message": "–ù–µ –ú–∏—à–∞,–≤—Å—ë —Ö—É–π–Ω—è! –î–∞–≤–∞–π –ø–æ –Ω–æ–≤–æ–π!",
                                            "random_id": random.randint(1, 2147483647)})
                log(id, body)

            elif body.lower() == '—Ö–µ–ª–ø' or body.lower() == '–ø–æ–º–æ—â—å':
                vk.method("messages.send", {"peer_id": id,
                                            "message": help(),
                                            "random_id": random.randint(1, 2147483647)})
                log(id, body)

            elif body.lower() == '–ø—Ä–æ—Ñ–∏–ª—å' or body.lower() == '–Ω–∞—á–∞—Ç—å' or body.lower() == '–ø—Ä–æ—Ñ' or body.lower() == 'start':
                vk.method("messages.send", {"peer_id": id,
                                            "message": prof(id),
                                            "random_id": random.randint(1, 2147483647)})
                log(id, body)

            elif body.lower() == '–±–∞–ª–∞–Ω—Å' or body.lower() == '–±–∞–ª':
                vk.method("messages.send", {"peer_id": id,
                                            "message": bal(id),
                                            "random_id": random.randint(1, 2147483647)})
                log(id, body)

            elif body.lower() == '—Å—Ç–∞—Ç–∞':
                vk.method("messages.send", {"peer_id": id,
                                            "message": gstats(id),
                                            "random_id": random.randint(1, 2147483647)})
                log(id, body)

            elif "–∞–Ω–µ–∫–¥–æ—Ç" in body.lower():
                vk.method("messages.send",
                          {"peer_id": id, "message": getanekdot(), "random_id": random.randint(1, 2147483647)})
                log(id, body)

            if '–∫—Å—Ç–∞—Ç–∞' in body.lower():
                if len(str(body).split()) == 3:
                    temp = str(body).split(" ")
                    nick = temp[1]
                    idd = temp[2]
                    stats(nick, idd)
                    log(id, body)
                else:
                    vk.method("messages.send", {"peer_id": id,
                                                "message": "‚ö†–î–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏ id Battle.net —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ü—Ä–∏–º–µ—Ä: —Å—Ç–∞—Ç–∞ Vlad 214228‚ö†",
                                                "random_id": random.randint(1, 2147483647)})

            elif '–∫—Å—Ç–∞—Ç20' in body.lower():
                if len(body) > 5:
                    temp = str(body).split(" ")
                    nick = temp[1]
                    idd = temp[2]
                    stats20(nick, idd)
                    log(id, body)
                else:
                    vk.method("messages.send", {"peer_id": id,
                                                "message": "‚ö†–î–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏ id Battle.net —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ü—Ä–∏–º–µ—Ä: —Å—Ç–∞—Ç20 Vlad 214228‚ö†",
                                                "random_id": random.randint(1, 2147483647)})

            elif '—Å–±–∞–ª' in body.lower():
                if id in admins or id in moders:
                    if len(str(body).split()) == 2:
                        temp = str(body).split(" ")
                        val = temp[1]
                        vk.method("messages.send", {"peer_id": id,
                                                "message": cbal(id,val),
                                                "random_id": random.randint(1, 2147483647)})
                        log(id, body)
                else:
                    vk.method("messages.send", {"peer_id": id,
                                                "message": "–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä!",
                                                "random_id": random.randint(1, 2147483647)})

            elif '–¥–±–∞–ª' in body.lower():
                if id in admins:
                    if len(str(body).split()) == 3:
                        temp = str(body).split(" ")
                        val = temp[2]
                        idd = temp[1]
                        vk.method("messages.send", {"peer_id": id,
                                                    "message": dbal(idd, val),
                                                    "random_id": random.randint(1, 2147483647)})
                        log(id, body)
                else:
                    vk.method("messages.send", {"peer_id": id,
                                                "message": "–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
                                                "random_id": random.randint(1, 2147483647)})

            elif '–¥–ø—Ä–æ—Ñ' in body.lower():
                if id in admins or id in moders:
                    if len(str(body).split()) == 2:
                        temp = str(body).split(" ")
                        idd = temp[1]
                        vk.method("messages.send", {"peer_id": id,
                                                "message": dprof(idd),
                                                "random_id": random.randint(1, 2147483647)})
                        log(id, body)
                else:
                    vk.method("messages.send", {"peer_id": id,
                                                "message": "–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä!",
                                                "random_id": random.randint(1, 2147483647)})

            elif '–∫–∞–∑–∏–Ω–æ' in body.lower() or '–∫–∞–∑–∏–∫' in body.lower():
                if len(str(body).split()) == 2:
                    temp = str(body).split(" ")
                    amount = temp[1]
                    vk.method("messages.send", {"peer_id": id,
                                                "message": kaz(id, amount),
                                                "random_id": random.randint(1, 2147483647)})
                    log(id, body)

            elif '–º–æ–Ω–µ—Ç–æ—á–∫–∞' in body.lower() or '–º–æ–Ω–µ—Ç–∫–∞' in body.lower():
                if len(str(body).split()) == 2:
                    temp = str(body).split(" ")
                    amount = temp[1]
                    vk.method("messages.send", {"peer_id": id,
                                                "message": monetka(id, amount),
                                                "random_id": random.randint(1, 2147483647)})
                    log(id, body)
                else:
                    vk.method("messages.send", {"peer_id": id,
                                                "message": "–û–±—ã—á–Ω–∞—è –∏–≥—Ä–∞ –≤ –º–æ–Ω–µ—Ç–æ—á–∫—É\n–ï—Å–ª–∏ –≤—ã–ø–∞–¥–µ—Ç –û—Ä–µ–ª - –≤—ã –≤—ã–π–≥—Ä–∞–µ—Ç–µ,–†–µ—à–∫–∞ - –ø—Ä–æ–∏–≥—Ä–∞–µ—Ç–µ\n–£–¥–∞—á–∏!\n'–º–æ–Ω–µ—Ç–∫–∞ {—Å—É–º–º–∞}'",
                                                "random_id": random.randint(1, 2147483647)})

            elif '—Å–Ω–∏–∫' in body.lower():
                if len(str(body).split()) == 2:
                    temp = str(body).split(" ")
                    nickk = temp[1]
                    vk.method("messages.send", {"peer_id": id,
                                                "message": nick(id, nickk),
                                                "random_id": random.randint(1, 2147483647)})
                    log(id, body)
                else:
                    vk.method("messages.send", {"peer_id": id,
                                                "message": "–í–∞—à –Ω–∏–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ –ø—É—Å—Ç–æ–π",
                                                "random_id": random.randint(1, 2147483647)})

            elif '–¥–Ω–∏–∫' in body.lower():
                if id in admins:
                    if len(str(body).split()) == 3:
                        temp = str(body).split(" ")
                        idd = temp[1]
                        nickk = temp[2]
                        vk.method("messages.send", {"peer_id": id,
                                                    "message": dnick(idd, nickk),
                                                    "random_id": random.randint(1, 2147483647)})
                        log(id, body)
                else:
                    vk.method("messages.send", {"peer_id": id,
                                                "message": "–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
                                                "random_id": random.randint(1, 2147483647)})

            elif 'users' in body.lower():
                if id in admins or id in moders:
                    if len(str(body).split()) == 1:
                        vk.method("messages.send", {"peer_id": id,
                                                    "message": ulist(),
                                                "random_id": random.randint(1, 2147483647)})
                        log(id, body)
                else:
                    vk.method("messages.send", {"peer_id": id,
                                                "message": "–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä!",
                                                "random_id": random.randint(1, 2147483647)})

            elif body.lower() == 'staff' or body.lower() == '–∞–¥–º–∏–Ω—ã' or body.lower() == '–º–æ–¥–µ—Ä—ã' or body.lower() == '—Å—Ç–∞—Ñ—Ñ':
                vk.method("messages.send", {"peer_id": id,
                                            "message": staff(),
                                            "random_id": random.randint(1, 2147483647)})
                log(id, body)

            elif body.lower() == '—Ñ–∏–ª—å–º':
                vk.method("messages.send", {"peer_id": id,
                                            "message": rfilm(),
                                            "attachment": d,
                                            "random_id": random.randint(1, 2147483647)})
                log(id, body)

            elif body.lower() == '–ª–æ–≥–∏':
                if id in admins or id in moders:
                    vk.method("messages.send", {"peer_id": id,
                                                "message": glog(),
                                                "random_id": random.randint(1, 2147483647)})
                    log(id, body)
                else:
                    vk.method("messages.send", {"peer_id": id,
                                                "message": "–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
                                                "random_id": random.randint(1, 2147483647)})

            elif '–ø–µ—Ä–µ–¥–∞—Ç—å' in body.lower():
                if len(str(body).split()) == 3:
                    temp = str(body).split(" ")
                    idd = temp[1]
                    val = temp[2]
                    vk.method("messages.send", {"peer_id": id,
                                                "message": pay(id, idd, val),
                                                "random_id": random.randint(1, 2147483647)})
                    log(id, body)

    except BaseException as E:
        print(E)
        vk.method("messages.send",
                  {"peer_id": 419760643, "message": E, "random_id": random.randint(1, 2147483647)})