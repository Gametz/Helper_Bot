# -*- coding: utf-8 -*-
import vk_api
import dropbox
import requests
import bs4
import datetime
import random
import json
import time
import os.path
import threading
from vk_api.keyboard import VkKeyboard, VkKeyboardColor

def res():
    return time.strftime("%x %X", time.localtime())

ver = "\n\nv1.6.8 –æ—Ç 21.06.2021 05:10 –ú–°–ö"
users = next(os.walk("json/"))[2]
token = "2d26f19312dd93258ca84a1c533fefb1cffbb3a9d63d775e78ae3c62bd4254806825bdf2af924f8408d78"
vk = vk_api.VkApi(token=token)
vk._auth_token()

admins = [419760643]
moders = [361585264, 190114998, 418333599, 562995566]

#keyboard
mainmenu = VkKeyboard(one_time=False)
mainmenu.add_button(label="–ü—Ä–æ—Ñ–∏–ª—å")
mainmenu.add_line()
mainmenu.add_button(label="–ë–æ–Ω—É—Å", color=VkKeyboardColor.PRIMARY)
mainmenu.add_button(label="–ë–∞–Ω–∫")
mainmenu.add_button(label="–ë–∞–ª–∞–Ω—Å", color=VkKeyboardColor.POSITIVE)
mainmenu.add_line()
mainmenu.add_button(label="–ú–∞–≥–∞–∑–∏–Ω")
mainmenu.add_button(label="–†–∞–±–æ—Ç—ã")
mainmenu.add_button(label="–ò–≥—Ä—ã")
mainmenu.add_line()
mainmenu.add_button(label="–£—Ä–æ–≤–Ω–∏")
mainmenu.add_button(label="–§–µ—Ä–º–∞")
mainmenu.add_button(label="–°—Ç–∞—Ç–∞")
mainmenu.add_button(label="–¢–æ–ø")
mainmenu.add_line()
mainmenu.add_button(label="–ê–¥–º–∏–Ω–ø–∞–Ω–µ–ª—å", color=VkKeyboardColor.NEGATIVE)
mainmenu.add_button(label="–ö–æ–º–∞–Ω–¥—ã", color=VkKeyboardColor.SECONDARY)

worksmenu = VkKeyboard(one_time=False)
worksmenu.add_button(label="–†–∞–±–æ—Ç–∞—Ç—å 1")
worksmenu.add_button(label="–†–∞–±–æ—Ç–∞—Ç—å 2")
worksmenu.add_line()
worksmenu.add_button(label="–†–∞–±–æ—Ç–∞—Ç—å 3")
worksmenu.add_button(label="–†–∞–±–æ—Ç–∞—Ç—å 4")
worksmenu.add_line()
worksmenu.add_button(label="–†–∞–±–æ—Ç–∞—Ç—å 5")
worksmenu.add_button(label="–†–∞–±–æ—Ç–∞—Ç—å 6")
worksmenu.add_line()
worksmenu.add_button(label="–†–∞–±–æ—Ç–∞—Ç—å 7")
worksmenu.add_button(label="–†–∞–±–æ—Ç–∞—Ç—å 8")
worksmenu.add_line()
worksmenu.add_button(label="–†–∞–±–æ—Ç–∞—Ç—å 9")
worksmenu.add_button(label="–†–∞–±–æ—Ç–∞—Ç—å 10")
worksmenu.add_line()
worksmenu.add_button(label="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", color=VkKeyboardColor.POSITIVE)

shopmenu = VkKeyboard(one_time=False)
shopmenu.add_button(label="–ú–∞—à–∏–Ω—ã")
shopmenu.add_line()
shopmenu.add_button(label="–¢–µ–ª–µ—Ñ–æ–Ω—ã")
shopmenu.add_line()
shopmenu.add_button(label="–î–æ–º–∞")
shopmenu.add_line()
shopmenu.add_button(label="–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã")
shopmenu.add_line()
shopmenu.add_button(label="–ü—Ä–æ–¥–∞—Ç—å", color=VkKeyboardColor.NEGATIVE)
shopmenu.add_line()
shopmenu.add_button(label="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", color=VkKeyboardColor.POSITIVE)

carsmenu = VkKeyboard(one_time=False)
carsmenu.add_button(label="–ö–º–∞—à–∏–Ω—É 1")
carsmenu.add_button(label="–ö–º–∞—à–∏–Ω—É 2")
carsmenu.add_button(label="–ö–º–∞—à–∏–Ω—É 3")
carsmenu.add_line()
carsmenu.add_button(label="–ö–º–∞—à–∏–Ω—É 4")
carsmenu.add_button(label="–ö–º–∞—à–∏–Ω—É 5")
carsmenu.add_button(label="–ö–º–∞—à–∏–Ω—É 6")
carsmenu.add_line()
carsmenu.add_button(label="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", color=VkKeyboardColor.POSITIVE)
carsmenu.add_button(label="‚¨Ö –ú–∞–≥–∞–∑–∏–Ω", color=VkKeyboardColor.PRIMARY)

phonemenu = VkKeyboard(one_time=False)
phonemenu.add_button(label="–ö—Ç–µ–ª 1")
phonemenu.add_button(label="–ö—Ç–µ–ª 2")
phonemenu.add_button(label="–ö—Ç–µ–ª 3")
phonemenu.add_line()
phonemenu.add_button(label="–ö—Ç–µ–ª 4")
phonemenu.add_button(label="–ö—Ç–µ–ª 5")
phonemenu.add_line()
phonemenu.add_button(label="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", color=VkKeyboardColor.POSITIVE)
phonemenu.add_button(label="‚¨Ö –ú–∞–≥–∞–∑–∏–Ω", color=VkKeyboardColor.PRIMARY)

homemenu = VkKeyboard(one_time=False)
homemenu.add_button(label="–ö–¥–æ–º 1")
homemenu.add_button(label="–ö–¥–æ–º 2")
homemenu.add_button(label="–ö–¥–æ–º 3")
homemenu.add_line()
homemenu.add_button(label="–ö–¥–æ–º 4")
homemenu.add_button(label="–ö–¥–æ–º 5")
homemenu.add_button(label="–ö–¥–æ–º 6")
homemenu.add_line()
homemenu.add_button(label="–ö–¥–æ–º 7")
homemenu.add_button(label="–ö–¥–æ–º 8")
homemenu.add_line()
homemenu.add_button(label="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", color=VkKeyboardColor.POSITIVE)
homemenu.add_button(label="‚¨Ö –ú–∞–≥–∞–∑–∏–Ω", color=VkKeyboardColor.PRIMARY)

gpumenu = VkKeyboard(one_time=False)
gpumenu.add_button(label="–ö–∫–∞—Ä—Ç—É 1")
gpumenu.add_button(label="–ö–∫–∞—Ä—Ç—É 2")
gpumenu.add_button(label="–ö–∫–∞—Ä—Ç—É 3")
gpumenu.add_line()
gpumenu.add_button(label="–ö–∫–∞—Ä—Ç—É 4")
gpumenu.add_button(label="–ö–∫–∞—Ä—Ç—É 5")
gpumenu.add_button(label="–ö–∫–∞—Ä—Ç—É 6")
gpumenu.add_line()
gpumenu.add_button(label="&#12288;")
gpumenu.add_line()
gpumenu.add_button(label="–ö–∫–∞—Ä—Ç—É 7")
gpumenu.add_button(label="–ö–∫–∞—Ä—Ç—É 8")
gpumenu.add_button(label="–ö–∫–∞—Ä—Ç—É 9")
gpumenu.add_line()
gpumenu.add_button(label="–ö–∫–∞—Ä—Ç—É 10")
gpumenu.add_button(label="–ö–∫–∞—Ä—Ç—É 11")
gpumenu.add_button(label="–ö–∫–∞—Ä—Ç—É 12")
gpumenu.add_line()
gpumenu.add_button(label="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", color=VkKeyboardColor.POSITIVE)
gpumenu.add_button(label="‚¨Ö –ú–∞–≥–∞–∑–∏–Ω", color=VkKeyboardColor.PRIMARY)

sellmenu = VkKeyboard(one_time=False)
sellmenu.add_button(label="–ü–º–∞—à–∏–Ω—É", color=VkKeyboardColor.NEGATIVE)
sellmenu.add_line()
sellmenu.add_button(label="–ü—Ç–µ–ª", color=VkKeyboardColor.NEGATIVE)
sellmenu.add_line()
sellmenu.add_button(label="–ü–¥–æ–º", color=VkKeyboardColor.NEGATIVE)
sellmenu.add_line()
sellmenu.add_button(label="–ü–∫–∞—Ä—Ç—É", color=VkKeyboardColor.NEGATIVE)
sellmenu.add_line()
sellmenu.add_button(label="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", color=VkKeyboardColor.POSITIVE)
sellmenu.add_button(label="‚¨Ö –ú–∞–≥–∞–∑–∏–Ω", color=VkKeyboardColor.PRIMARY)

farmmenu = VkKeyboard(one_time=False)
farmmenu.add_button(label="–°–±–∏—Ç–∫–∏")
farmmenu.add_line()
farmmenu.add_button(label="‚ôª –û–±–Ω–æ–≤–∏—Ç—å")
farmmenu.add_line()
farmmenu.add_button(label="–ë–∏—Ç–∫–æ–∏–Ω—ã")
farmmenu.add_line()
farmmenu.add_button(label="–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã", color=VkKeyboardColor.PRIMARY)
farmmenu.add_line()
farmmenu.add_button(label="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", color=VkKeyboardColor.POSITIVE)

adminmenu = VkKeyboard(one_time=False)
adminmenu.add_button(label="–üo–ª–Ω–∞—è –Ω–∞–∫—Ä—É—Ç–∫–∞", color=VkKeyboardColor.POSITIVE)
adminmenu.add_button(label="O–±–Ω—É–ª–µ–Ω–∏–µ", color=VkKeyboardColor.NEGATIVE)
adminmenu.add_line()
adminmenu.add_button(label="–°–±–∞–ª 1000000")
adminmenu.add_line()
adminmenu.add_button(label="–°–±–∏—Ç–∫ 5000")
adminmenu.add_line()
adminmenu.add_button(label="–°–ª–≤–ª 5")
adminmenu.add_line()
adminmenu.add_button(label="–°–æ–ø—ã—Ç 500")
adminmenu.add_line()
adminmenu.add_button(label="Users")
adminmenu.add_line()
adminmenu.add_button(label="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", color=VkKeyboardColor.POSITIVE)

monetkasidemenu = VkKeyboard(one_time=False)
monetkasidemenu.add_button(label="–û—Ä–µ–ª")
monetkasidemenu.add_button(label="–†–µ—à–∫–∞")
monetkasidemenu.add_line()
monetkasidemenu.add_button(label="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", color=VkKeyboardColor.POSITIVE)
monetkasidemenu.add_button(label="‚¨Ö –ò–≥—Ä—ã", color=VkKeyboardColor.PRIMARY)

monetkaorelmenu = VkKeyboard(one_time=False)
monetkaorelmenu.add_button(label="–ú–æ–Ω–µ—Ç–∫–∞ –æ—Ä–µ–ª 1000")
monetkaorelmenu.add_button(label="–ú–æ–Ω–µ—Ç–∫–∞ –æ—Ä–µ–ª 10000")
monetkaorelmenu.add_line()
monetkaorelmenu.add_button(label="–ú–æ–Ω–µ—Ç–∫–∞ –æ—Ä–µ–ª 100000")
monetkaorelmenu.add_button(label="–ú–æ–Ω–µ—Ç–∫–∞ –æ—Ä–µ–ª 500000")
monetkaorelmenu.add_line()
monetkaorelmenu.add_button(label="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", color=VkKeyboardColor.POSITIVE)
monetkaorelmenu.add_button(label="‚¨Ö –ò–≥—Ä—ã", color=VkKeyboardColor.PRIMARY)

monetkareshkamenu = VkKeyboard(one_time=False)
monetkareshkamenu.add_button(label="–ú–æ–Ω–µ—Ç–∫–∞ —Ä–µ—à–∫–∞ 1000")
monetkareshkamenu.add_button(label="–ú–æ–Ω–µ—Ç–∫–∞ —Ä–µ—à–∫–∞ 10000")
monetkareshkamenu.add_line()
monetkareshkamenu.add_button(label="–ú–æ–Ω–µ—Ç–∫–∞ —Ä–µ—à–∫–∞ 100000")
monetkareshkamenu.add_button(label="–ú–æ–Ω–µ—Ç–∫–∞ —Ä–µ—à–∫–∞ 500000")
monetkareshkamenu.add_line()
monetkareshkamenu.add_button(label="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", color=VkKeyboardColor.POSITIVE)
monetkareshkamenu.add_button(label="‚¨Ö –ò–≥—Ä—ã", color=VkKeyboardColor.PRIMARY)

kazmenu = VkKeyboard(one_time=False)
kazmenu.add_button(label="–ö–∞–∑–∏–Ω–æ –≤—Å—ë")
kazmenu.add_button(label="–ö–∞–∑–∏–Ω–æ –ø–æ–ª–æ–≤–∏–Ω–∞")
kazmenu.add_line()
kazmenu.add_button(label="–ö–∞–∑–∏–Ω–æ 1000")
kazmenu.add_button(label="–ö–∞–∑–∏–Ω–æ 50000")
kazmenu.add_line()
kazmenu.add_button(label="–ö–∞–∑–∏–Ω–æ 100000")
kazmenu.add_button(label="–ö–∞–∑–∏–Ω–æ 500000")
kazmenu.add_line()
kazmenu.add_button(label="–ö–∞–∑–∏–Ω–æ 1000000")
kazmenu.add_button(label="–ö–∞–∑–∏–Ω–æ 5000000")
kazmenu.add_line()
kazmenu.add_button(label="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", color=VkKeyboardColor.POSITIVE)
kazmenu.add_button(label="‚¨Ö –ò–≥—Ä—ã", color=VkKeyboardColor.PRIMARY)

gamesmenu = VkKeyboard(one_time=False)
gamesmenu.add_button(label="–ú–æ–Ω–µ—Ç–∫–∞")
gamesmenu.add_button(label="–ö–∞–∑–∏–Ω–æ")
gamesmenu.add_line()
gamesmenu.add_button(label="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", color=VkKeyboardColor.POSITIVE)

btcmenu = VkKeyboard(one_time=False)
btcmenu.add_button(label="–ö–±–∏—Ç–∫ –≤—Å–µ", color=VkKeyboardColor.POSITIVE)
btcmenu.add_line()
btcmenu.add_button(label="–ö–±–∏—Ç–∫ 1")
btcmenu.add_button(label="–ö–±–∏—Ç–∫ 10")
btcmenu.add_button(label="–ö–±–∏—Ç–∫ 100")
btcmenu.add_line()
btcmenu.add_button(label="–ü–±–∏—Ç–∫ –≤—Å–µ", color=VkKeyboardColor.NEGATIVE)
btcmenu.add_line()
btcmenu.add_button(label="–ü–±–∏—Ç–∫ 1")
btcmenu.add_button(label="–ü–±–∏—Ç–∫ 10")
btcmenu.add_button(label="–ü–±–∏—Ç–∫ 100")
btcmenu.add_line()
btcmenu.add_button(label="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", color=VkKeyboardColor.POSITIVE)

bankmenu = VkKeyboard(one_time=False)
bankmenu.add_button(label="–ë–∞–Ω–∫ –ø–æ–ª–æ–∂–∏—Ç—å –≤—Å—ë", color=VkKeyboardColor.PRIMARY)
bankmenu.add_button(label="–ë–∞–Ω–∫ –ø–æ–ª–æ–∂–∏—Ç—å –ø–æ–ª–æ–≤–∏–Ω—É", color=VkKeyboardColor.PRIMARY)
bankmenu.add_line()
bankmenu.add_button(label="–ë–∞–Ω–∫ —Å–Ω—è—Ç—å –≤—Å—ë", color=VkKeyboardColor.POSITIVE)
bankmenu.add_button(label="–ë–∞–Ω–∫ —Å–Ω—è—Ç—å –ø–æ–ª–æ–≤–∏–Ω—É", color=VkKeyboardColor.POSITIVE)
bankmenu.add_line()
bankmenu.add_button(label="–ë–∞–Ω–∫ –±–∞–ª–∞–Ω—Å")
bankmenu.add_line()
bankmenu.add_button(label="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", color=VkKeyboardColor.POSITIVE)

topmenu = VkKeyboard(one_time=False)
topmenu.add_button(label="–ë–∞–ª—Ç–æ–ø")
topmenu.add_button(label="–ë–∏—Ç–∫—Ç–æ–ø")
topmenu.add_line()
topmenu.add_button(label="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", color=VkKeyboardColor.POSITIVE)

errormenu = VkKeyboard(one_time=False, inline=True)
errormenu.add_button(label="–ö–æ–º–∞–Ω–¥—ã", color=VkKeyboardColor.POSITIVE)

bonusmenu = VkKeyboard(one_time=False, inline=True)
bonusmenu.add_button(label="–ë–æ–Ω—É—Å", color=VkKeyboardColor.POSITIVE)
# keyboard

def log(id, body):
    with open('log.txt', 'a', encoding='utf-8') as f:
        f.writelines("\n[" + res() + "] " + str(id) + " " + str(body) + " | –£—Å–ø–µ—à–Ω–æ!")
    #print("\n[" + res() + "] " + str(id) + " " + str(body) + " | –£—Å–ø–µ—à–Ω–æ!")

def glog():
    with open('log.txt', 'rb') as file:
        dbx = dropbox.Dropbox('sl.Ax5pyyTfcRNz4V0QRhG8hupqL8F5fvJImM67I0F0qinlhxi2eTObol6Skf1Tvg4oVgVPrhrwa6-6QzI6JNlI0VeuZWgbcyyL9KYS4aQmbzeGFHpEtQzu5acc6wUDxdceXoqxH0X0iLLv')
        r = dbx.files_delete_v2('/log.txt')
        if 'UploadWriteFailed(reason=WriteError(' in str(r):
            r = dbx.files_upload(file.read(), '/log.txt')
            l = dbx.sharing_create_shared_link('/log.txt')
            return l
        else:
            r = dbx.files_upload(file.read(), '/log.txt')
            l = dbx.sharing_create_shared_link('/log.txt')
            return l

def ifstaff(id):
    if id in admins or id in moders:
        if id in admins:
            return '‚úÖ | –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
        if id in moders:
            return '‚úÖ | –ë–µ—Ç–∞-—Ç–µ—Å—Ç–µ—Ä'
    else:
        return 'üö´ | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'

def prof(id):
    x = {
        "id": id,
        "balance": 1000,
        "bank": 0,
        "btc": 0.0,
        "farm": 0.0,
        "gpu": "",
        "farmed": 0.0,
        "farming": False,
        "level": 1,
        "exp": 0,
        "nick": "",
        "kwin": 0,
        "klose": 0,
        "mwin": 0,
        "mlose": 0,
        "wstatus": False,
        "reg": res(),
        "lbonus": 1623869110,
        "car": "",
        "phone": "",
        "home": "",
        "banned": "NO"
    }
    try:
        with open('json/' + str(id) + '.json') as f:
            ff = json.loads(f.read())
    except:
        with open('json/' + str(id) + '.json', 'w') as f:
            f.write(json.dumps(x, indent=4))
        vk.method("messages.send", {"peer_id": 419760643,
                                    "message": "üíé –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! | vk.com/id" + str(id),
                                    "random_id": random.randint(1, 2147483647)})
        return 'üí¨ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∏–∂—É —Ç—ã –∑–¥–µ—Å—å –Ω–æ–≤–µ–Ω—å–∫–∏–π, –∏—Å–ø–æ–ª—å–∑—É–π "—Ö–µ–ª–ø" –¥–ª—è –ø–æ–º–æ—â–∏ –∏ —Ä–∞–∑–≤–ª–µ–∫–∞–π—Å—è!' \
               '\nüí≤ –ê –µ—â–µ,–¥–µ—Ä–∂–∏ —Å–≤–æ–π –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ 1000$\n\n' + prof(str(id))

    return '–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n' + \
           'üîé id: ' + str(ff["id"]) + \
           '\nüìã –ù–∏–∫: ' + str(ff["nick"]) + \
           '\nüí∞ –ë–∞–ª–∞–Ω—Å: ' + str(ff["balance"]) + "$" + \
           '\nüí≥ –ë–∞–Ω–∫: ' + str(ff["bank"]) + "$" + \
           '\nüí¥ –ë–∏—Ç–∫–æ–∏–Ω—ã: ' + str(round(ff["btc"],5)) + "‚Çø" + \
           '\nüì∂ –£—Ä–æ–≤–µ–Ω—å: ' + str(ff["level"]) + \
           '\nüí° –û–ø—ã—Ç: ' + str(ff["exp"]) + \
           '\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ' + str(len(users)) + \
           '\n' \
           '\nüîë –ò–º—É—â–µ—Å—Ç–≤–æ:' \
           '\n&#12288;üöó –ú–∞—à–∏–Ω–∞: ' + carcheck(id) + \
           '\n&#12288;üè° –î–æ–º: ' + homecheck(id) +  \
           '\n&#12288;üì± –¢–µ–ª–µ—Ñ–æ–Ω: ' + phonecheck(id) + \
           '\n&#12288;üéû –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞: ' + farmcheck(id) + \
           '\n' \
           '\nüëî –í—ã –ø–µ—Ä—Å–æ–Ω–∞–ª: ' + ifstaff(id) + \
           '\n‚õî –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞: ' + profbancheck(id) + \
           '\nüìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ' + str(ff["reg"]) + ver

# –ò–º—É—â–µ—Å—Ç–≤–æ
def carcheck(id):
    with open('json/' + str(id) + '.json') as f:
        ff = json.loads(f.read())
    if ff["car"] == "":
        return "–ù–µ—Ç"
    else:
        return ff["car"]

def homecheck(id):
    with open('json/' + str(id) + '.json') as f:
        ff = json.loads(f.read())
    if ff["home"] == "":
        return "–ù–µ—Ç"
    else:
        return ff["home"]

def phonecheck(id):
    with open('json/' + str(id) + '.json') as f:
        ff = json.loads(f.read())
    if ff["phone"] == "":
        return "–ù–µ—Ç"
    else:
        return ff["phone"]

def farmcheck(id):
    with open('json/' + str(id) + '.json') as f:
        ff = json.loads(f.read())
    if ff["gpu"] == "":
        return "–ù–µ—Ç"
    else:
        return ff["gpu"]
# –ò–º—É—â–µ—Å—Ç–≤–æ

def dprof(idd):
    with open('json/' + str(idd) + '.json') as f:
        ff = json.loads(f.read())
    return '–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å: vk.com/id' + idd + \
           '\nüîé id: ' + str(ff["id"]) + \
           '\nüìã –ù–∏–∫: ' + str(ff["nick"]) + \
           '\nüí∞ –ë–∞–ª–∞–Ω—Å: ' + str(ff["balance"]) + \
           '\nüí≥ –ë–∞–Ω–∫: ' + str(ff["bank"]) + \
           '\nüí¥ –ë–∏—Ç–∫–æ–∏–Ω—ã: ' + str(ff["btc"]) + \
           '\nüì∂ –£—Ä–æ–≤–µ–Ω—å: ' + str(ff["level"]) + \
           '\nüí° –û–ø—ã—Ç: ' + str(ff["exp"]) + \
           '\nüëî –ü–µ—Ä—Å–æ–Ω–∞–ª: ' + ifstaff(int(idd)) + \
           '\n' \
           '\nüîë –ò–º—É—â–µ—Å—Ç–≤–æ:' \
           '\n&#12288;üöó –ú–∞—à–∏–Ω–∞: ' + carcheck(idd) + \
           '\n&#12288;üè° –î–æ–º: ' + homecheck(idd) +  \
           '\n&#12288;üì± –¢–µ–ª–µ—Ñ–æ–Ω: ' + phonecheck(idd) + \
           '\n&#12288;üéû –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞: ' + farmcheck(idd) + \
           '\n' \
           '\n‚õî –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞: ' + profbancheck(idd) + \
           '\nüìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ' + str(ff["reg"])

def profbancheck(id):
    with open('json/' + str(id) + '.json') as f:
        ff = json.loads(f.read())
    if ff["banned"] == "NO":
        return "üö´"
    else:
        r = ff["banned"].split(" ")[-1]
        return "‚úÖ | " + r

def giveban(id,idd,rsn):
    path = "json/"
    f=os.listdir(path)
    for i in range (len(f)):
        f[i] = str(f[i][:-5])
    if idd in f:
        with open('json/' + str(idd) + '.json') as f:
            ff = json.loads(f.read())
        if ff["banned"] == "NO":
            s = str(id) + " " + rsn
            ff["banned"] = s
            with open('json/' + str(idd) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            vk.method("messages.send", {"peer_id": idd,
                                        "message": "‚ö† –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –ø—Ä–∏—á–∏–Ω–µ: " + rsn + "\n–ï—Å–ª–∏ –Ω–µ —Å–æ–≥–ª–∞—Å–Ω—ã —Å –±–∞–Ω–æ–º,–Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ä–µ–ø–æ—Ä—Ç",
                                        "random_id": random.randint(1, 2147483647)})
            return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!"
        else:
            return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω!"
    else:
        return "–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"

def unban(idd):
    path = "json/"
    f=os.listdir(path)
    for i in range (len(f)):
        f[i] = str(f[i][:-5])
    if idd in f:
        with open('json/' + str(idd) + '.json') as f:
            ff = json.loads(f.read())
        if ff["banned"] != "NO":
            ff["banned"] = "NO"
            with open('json/' + str(idd) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            vk.method("messages.send", {"peer_id": idd,
                                        "message": "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!üéâ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!",
                                        "random_id": random.randint(1, 2147483647)})
            return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!"
        else:
            return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"
    else:
        return "–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"

def bank(id, type, amount):
    with open('json/' + str(id) + '.json', encoding='utf-8') as f:
        ff = json.loads(f.read())

    if type == "–ø–æ–ª–æ–∂–∏—Ç—å" and amount == "–≤—Å–µ" or amount == "–≤—Å—ë":
        amount = ff["balance"]
    if type == "—Å–Ω—è—Ç—å" and amount == "–≤—Å–µ" or amount == "–≤—Å—ë":
        amount = ff["bank"]
    if type == "–ø–æ–ª–æ–∂–∏—Ç—å" and amount == "–ø–æ–ª–æ–≤–∏–Ω—É":
        amount = int(ff["balance"] / 2)
    if type == "—Å–Ω—è—Ç—å" and amount == "–ø–æ–ª–æ–≤–∏–Ω—É":
        amount = int(ff["bank"] / 2)

    if int(amount) > 0 and int(amount) <= ff["balance"] and type == "–ø–æ–ª–æ–∂–∏—Ç—å":
        ff["balance"] -= int(amount)
        ff["bank"] += int(amount)
        with open('json/' + str(id) + '.json', 'w') as f:
            f.write(json.dumps(ff, indent=4))
        return "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª–æ–∂–∏–ª–∏ " + str(amount) + "$ –≤ –±–∞–Ω–∫!"

    elif int(amount) > 0 and int(amount) <= ff["bank"] and type == "—Å–Ω—è—Ç—å":
        ff["balance"] += int(amount)
        ff["bank"] -= int(amount)
        with open('json/' + str(id) + '.json', 'w') as f:
            f.write(json.dumps(ff, indent=4))
        return "–í—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ " + str(amount) + "$ —Å–æ —Å—á—ë—Ç–∞!"

    else:
        return "–°—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –±–∞–ª–∞–Ω—Å –∏–ª–∏ –º–µ–Ω—å—à–µ 0\n" + bal(id)

def nick(id, nick):
    if len(nick) <= 15:
        with open('json/' + str(id) + '.json', encoding='utf-8') as f:
            ff = json.loads(f.read())
        ff["nick"] = nick
        with open('json/' + str(id) + '.json', 'w', encoding='utf-8') as f:
            f.write(json.dumps(ff, indent=4))
        return "–¢–µ–ø–µ—Ä—å –≤–∞—à –Ω–∏–∫: " + nick
    else:
        return "–í–∞—à –Ω–∏–∫ –±–æ–ª—å—à–µ 15 —Å–∏–º–≤–æ–ª–æ–≤!"

def dnick(id, nick):
    if len(nick) <= 15:
        with open('json/' + str(id) + '.json') as f:
            ff = json.loads(f.read())
        ff["nick"] = nick
        with open('json/' + str(id) + '.json', 'w') as f:
            f.write(json.dumps(ff, indent=4))
        return "–ù–∏–∫ " + id + " —Ç–µ–ø–µ—Ä—å: " + str(ff["nick"])
    else:
        return "–ù–∏–∫ –±–æ–ª—å—à–µ 15 —Å–∏–º–≤–æ–ª–æ–≤!"

def bal(id):
    with open('json/' + str(id) + '.json') as f:
        ff = json.loads(f.read())
    return 'üí∞–í–∞—à –±–∞–ª–∞–Ω—Å: ' + str(ff["balance"]) + "$\nüí¥ –ë–∏—Ç–∫–æ–∏–Ω—ã: " + str(ff["btc"]) + " ‚Çø"

def cbal(id,val):
    if int(val) >= 0 and int(val) <= 1000000:
            with open('json/' + str(id) + '.json') as f:
                ff = json.loads(f.read())
            try:
                ff["balance"] = int(val)
            except:
                return "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!"

            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            return "–¢–µ–ø–µ—Ä—å –≤–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"])
    else:
        return "–í—ã –≤–≤–µ–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—å—à–µ –Ω—É–ª—è –∏–ª–∏ –±–æ–ª—å—à–µ 1 000 000"

def dbal (idd,val):
    if int(val) >= 0 and int(val) <= 1000000000:
        with open('json/' + str(idd) + '.json') as f:
            ff = json.loads(f.read())
        try:
            ff["balance"] = int(val)
        except:
            return "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!"

        with open('json/' + str(idd) + '.json', 'w') as f:
            f.write(json.dumps(ff, indent=4))
        return "–¢–µ–ø–µ—Ä—å –±–∞–ª–∞–Ω—Å " + idd + ": " + str(ff["balance"])
    else:
        return "–í—ã –≤–≤–µ–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—å—à–µ –Ω—É–ª—è –∏–ª–∏ –±–æ–ª—å—à–µ 1 000 000 000"

def cbtc (id, val):
    if float(val) >= 0 and float(val) <= 5000:
        with open('json/' + str(id) + '.json') as f:
            ff = json.loads(f.read())
        ff["btc"] = round(float(val),5)
        with open('json/' + str(id) + '.json', 'w') as f:
            f.write(json.dumps(ff, indent=4))
        return "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å " + str(ff["btc"]) + "‚Çø"
    else:
        return "–í—ã –≤–≤–µ–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—å—à–µ –Ω—É–ª—è –∏–ª–∏ –±–æ–ª—å—à–µ 5000"

def clvl (id, val):
    if int(val) >= 1 and int(val) <= 5:
        with open('json/' + str(id) + '.json') as f:
            ff = json.loads(f.read())
        try:
            ff["level"] = int(val)
        except:
            return "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!"
        with open('json/' + str(id) + '.json', 'w') as f:
            f.write(json.dumps(ff, indent=4))
        return "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å " + str(ff["level"]) + " —É—Ä–æ–≤–µ–Ω—å"
    else:
        return "–í—ã –≤–≤–µ–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—å—à–µ 1 –∏–ª–∏ –±–æ–ª—å—à–µ 5"

def cexp (id, val):
    if int(val) >= 0 and int(val) <= 500:
        with open('json/' + str(id) + '.json') as f:
            ff = json.loads(f.read())
        try:
            ff["exp"] = int(val)
        except:
            return "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!"
        with open('json/' + str(id) + '.json', 'w') as f:
            f.write(json.dumps(ff, indent=4))
        return "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å " + str(ff["exp"]) + " –æ–ø—ã—Ç–∞"
    else:
        return "–í—ã –≤–≤–µ–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—å—à–µ 1 –∏–ª–∏ –±–æ–ª—å—à–µ 5"

def pay(id, idd, val):
    with open('json/' + str(id) + '.json', encoding='utf-8') as f:
        per = json.loads(f.read())
    try:
        with open('json/' + str(idd) + '.json', encoding='utf-8') as f:
            pol = json.loads(f.read())
    except:
        return "–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"

    if int(val) > 0 and int(val) <= per["balance"]:
        per["balance"] -= int(val)
        pol["balance"] += int(val)
        with open('json/' + str(id) + '.json', 'w', encoding='utf-8') as f:
            f.write(json.dumps(per, indent=4))
        with open('json/' + str(idd) + '.json', 'w', encoding='utf-8') as f:
            f.write(json.dumps(pol, indent=4))
        if per["nick"] == '':
            vk.method("messages.send", {"peer_id": idd,
                                "message": "–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç " + str(id) + " –≤ —Ä–∞–∑–º–µ—Ä–µ: " + val + "$",
                                "random_id": random.randint(1, 2147483647)})
        else:
            vk.method("messages.send", {"peer_id": idd,
                                "message": "–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç " + per["nick"] + " –≤ —Ä–∞–∑–º–µ—Ä–µ: " + val + "$",
                                "random_id": random.randint(1, 2147483647)})
        return "–ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω! \n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(per["balance"]) + "$"
    else:
        return "–°—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –≤–∞—à –±–∞–ª–∞–Ω—Å/–°—É–º–º–∞ –º–µ–Ω—å—à–µ 0\n" + bal(id)

def ulist():
    c=1
    path = "json/"
    f=os.listdir(path)
    for i in range (len(f)):
        f[i] = '[' + str(c) + '] ' + "vk.com/id" + str(f[i][:-5])
        c += 1
    a = '\n'.join(f)
    return "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n" + a

def games():
    return "üéÆ –°–ø–∏—Å–æ–∫ –∏–≥—Ä:" \
           "\n" \
           "\n&#12288;üé∞ –ö–∞–∑–∏–Ω–æ" \
           "\n&#12288;ü¶Ö –ú–æ–Ω–µ—Ç–∫–∞"

def kaz(id,amount):
    with open('json/' + str(id) + '.json') as f:
        ff = json.loads(f.read())
    try:
        if amount == "–≤—Å–µ" or amount == "–≤—Å—ë":
            amount = ff["balance"]
        if amount == "–ø–æ–ª–æ–≤–∏–Ω–∞":
            amount = int(ff["balance"] / 2)
        if int(amount) <= ff["balance"] and int(amount) > 0:
            r = random.randrange(0,15)
            if r == 0 or r == 1 or r == 2 or r == 3 or r == 4 or r == 5 or r == 6:
                ff["balance"] -= int(amount)
                ff["klose"] += int(round(int(amount)))
                with open('json/' + str(id) + '.json', 'w') as f:
                    f.write(json.dumps(ff, indent=4))
                return "üö´–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –≤—Å—é —Å—Ç–∞–≤–∫—É!\nüí∞–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"
            elif r == 7 or r == 8 or r == 9 or r == 10:
                win = int(amount)*1.5
                ff["balance"] += int(round(win))
                ff["kwin"] += int(round(win))
                with open('json/' + str(id) + '.json', 'w') as f:
                    f.write(json.dumps(ff, indent=4))
                return "‚úÖ–í—ã –≤—ã–π–≥—Ä–∞–ª–∏: " + str(int(win)) + "$ (1.5x)" + "\nüí∞–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"
            elif r == 11 or r == 12 or r == 13:
                win = int(amount) * 2
                ff["balance"] += int(round(win))
                ff["kwin"] += int(round(win))
                with open('json/' + str(id) + '.json', 'w') as f:
                    f.write(json.dumps(ff, indent=4))
                return "‚úÖ–í—ã –≤—ã–π–≥—Ä–∞–ª–∏: " + str(int(win)) + "$ (2x)" + "\nüí∞–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"
            elif r == 14:
                win = int(amount) * 5
                ff["balance"] += int(round(win))
                ff["kwin"] += int(round(win))
                with open('json/' + str(id) + '.json', 'w') as f:
                    f.write(json.dumps(ff, indent=4))

                return "‚úÖ–í—ã –≤—ã–π–≥—Ä–∞–ª–∏: " + str(int(win)) + "$ (5x)" + "\nüí∞–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"
        else:
            return "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –∏–ª–∏ —Å—É–º–º–∞ –º–µ–Ω—å—à–µ 0!\n" + bal(id)
    except:
        return "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!"

def monetka(id, side, amount):
    with open('json/' + str(id) + '.json') as f:
        ff = json.loads(f.read())
    if amount == "–≤—Å–µ" or amount == "–≤—Å—ë":
        amount = ff["balance"]
    if int(amount) <= ff["balance"] and int(amount) > 0:
        if side == "–æ—Ä–µ–ª":
            r = random.randrange(0, 2)
            if r == 0:
                ff["balance"] -= int(amount)
                ff["mlose"] += int(amount)
                with open('json/' + str(id) + '.json', 'w') as f:
                    f.write(json.dumps(ff, indent=4))
                return "üö´–í—ã–ø–∞–ª–∞ —Ä–µ—à–∫–∞,–≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!" + "\nüí∞–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"
            elif r == 1:
                win = int(amount) * 3
                ff["balance"] += int(round(win))
                ff["mwin"] += int(round(win))
                with open('json/' + str(id) + '.json', 'w') as f:
                    f.write(json.dumps(ff, indent=4))
            return "‚úÖ–í—ã –≤—ã–π–≥—Ä–∞–ª–∏,–≤—ã–ø–∞–ª –û—Ä–µ–ª: " + str(int(win)) + "$ (3x)" + "\nüí∞–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"
        elif side == "—Ä–µ—à–∫–∞":
            r = random.randrange(0, 2)
            if r == 0:
                ff["balance"] -= int(amount)
                ff["mlose"] += int(amount)
                with open('json/' + str(id) + '.json', 'w') as f:
                    f.write(json.dumps(ff, indent=4))
                return "üö´–í—ã–ø–∞–ª –û—Ä–µ–ª,–≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!" + "\nüí∞–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"
            elif r == 1:
                win = int(amount) * 3
                ff["balance"] += int(round(win))
                ff["mwin"] += int(round(win))
                with open('json/' + str(id) + '.json', 'w') as f:
                    f.write(json.dumps(ff, indent=4))
            return "‚úÖ–í—ã –≤—ã–π–≥—Ä–∞–ª–∏,–≤—ã–ø–∞–ª–∞ –†–µ—à–∫–∞: " + str(int(win)) + "$ (3x)" + "\nüí∞–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"
        return "–£ –º–æ–Ω–µ—Ç–∫–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ 2 —Å—Ç–æ—Ä–æ–Ω—ã - –û—Ä–µ–ª –∏ –†–µ—à–∫–∞"
    else:
        return "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –∏–ª–∏ —Å—É–º–º–∞ –º–µ–Ω—å—à–µ 0!\n" + bal(id)

def staff():
    return '–°–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞\n\n' + '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n' + '@gamtz (–í–ª–∞–¥ –ë–æ–≥–¥–∞–Ω–æ–≤)\n\n' + '–¢–µ—Å—Ç–µ—Ä—ã:\n @lymar1 (–ê–ª–µ–∫—Å–µ–π –õ—ã–º–∞—Ä)\n@plz_helpme_die (–î–µ–Ω–∏—Å –®–≤–µ—Ü)\n@yatox1c (–ï—Ñ–∏–º –ï—Ñ–∏–º–µ–Ω–∫–æ)\n@id562995566 (–ú–∏—Ö–∞–∏–ª –†–æ–º–∞–Ω–æ–≤)'

def help():
    return "üìö –û—Å–Ω–æ–≤–Ω—ã–µ" \
           "\n&#12288;üìñ –ü—Ä–æ—Ñ–∏–ª—å/–ü—Ä–æ—Ñ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å" \
           "\n&#12288;üìã –°–Ω–∏–∫ {–Ω–∏–∫} - –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –Ω–∏–∫" \
           "\n&#12288;üì∂ –£—Ä–æ–≤–Ω–∏ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é –æ–ø—ã—Ç–∞" \
           "\n&#12288;üí≤ –ë–∞–ª–∞–Ω—Å/–ë–∞–ª - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å" \
           "\n&#12288;ü§ù –ü–µ—Ä–µ–¥–∞—Ç—å {id} {—Å—É–º–º–∞} - –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω–µ–≥ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É" \
           "\n&#12288;üìú –¢–æ–ø - –ª—É—á—à–∏–µ –∏–≥—Ä–æ–∫–∏" \
           "\n&#12288;üõí –ú–∞–≥–∞–∑–∏–Ω - –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∫—É–ø–∏—Ç—å,—Ç–æ –≤–∞–º —Å—é–¥–∞" \
           "\n&#12288;üíº –†–∞–±–æ—Ç—ã - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–±–æ—Ç –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ $" \
           "\n&#12288;üí∞ –ë–æ–Ω—É—Å - –Ω–µ–º–Ω–æ–≥–æ $ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç" \
           "\n&#12288;üîã –§–µ—Ä–º–∞ - –≤–∞—à–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –º–∏–Ω–∏ –º–∞–π–Ω–∏–Ω–≥ —Ñ–µ—Ä–º–∞" \
           "\n&#12288;üìà –ë–∫—É—Ä—Å - –ö—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞" \
           "\n" \
           "\nüéõ –ò–≥—Ä—ã" \
           "\n&#12288;üìä –°—Ç–∞—Ç–∞ - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º" \
           "\n&#12288;üé∞ –ö–∞–∑–∏–Ω–æ/–ö–∞–∑–∏–∫ {—Å—É–º–º–∞} - –ø–æ–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –≤ –∫–∞–∑–∏–Ω–æ" \
           "\n&#12288;ü¶Ö –ú–æ–Ω–µ—Ç–∫–∞ {—Å—É–º–º–∞} - flip! –ü–æ–¥–±—Ä–æ—Å—å –º–æ–Ω–µ—Ç–∫—É" \
           "\n" \
           "\nüéâ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è" \
           "\n&#12288;ü§£ –ê–Ω–µ–∫–¥–æ—Ç - –Ω—É –ø—Ä–æ—Å—Ç–æ –∞–Ω–µ–∫–¥–æ—Ç (–•–∞-–•–∞)" \
           "\n&#12288;üìΩ –§–∏–ª—å–º - —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –∏–∑ kinopoisk" \
           "\n&#12288;üî´ –ö—Ç–∞—Ç–∞ {nick} {id} - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ COD:Warzone –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è" \
           "\n&#12288;üî´ –ö—Å—Ç–∞—Ç20 {nick} {id} - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ COD:Warzone –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –º–∞—Ç—á–µ–π" \
           "\n" \
           "\nüìú –î—Ä—É–≥–æ–µ" \
           "\n&#12288;üëî Staff/–ê–¥–º–∏–Ω—ã/–ú–æ–¥–µ—Ä—ã - —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ " \
           "\n&#12288;üíæ –ò–¥ {—Ç–µ–∫—Å—Ç} - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" \
           "\n&#12288;üë§ –ü—Ö–µ–ª–ø - –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞" \
           "\n&#12288;‚ö† –†–µ–ø–æ—Ä—Ç {—Ç–µ–∫—Å—Ç} - –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É" \
           "\n&#12288;üè° –∏—Ö–µ–ª–ø - –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º—É—â–µ—Å—Ç–≤–æ–º" \
        #"\n&#12288;üìÑ –õ–æ–≥–∏ - –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ (–æ—Ç –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞)"

def staffhelp():
    return "\nüìï –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞" \
           "\n&#12288;üí∏ —Å–±–∞–ª {—Å—É–º–º–∞} - –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å —Å–µ–±–µ (–æ—Ç –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞)" \
           "\n&#12288;üí≥ –¥–±–∞–ª {id} {—Å—É–º–º–∞} - –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É (–æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)" \
           "\n&#12288;üí≥ –°–±–∏—Ç–∫ {—Å—É–º–º–∞} - –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É (–æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)" \
           "\n&#12288;üë§ –î–ø—Ä–æ—Ñ {id} - –ø—Ä–æ—Å–º–æ—Ç—Ä —á—É–∂–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è (–æ—Ç –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞)" \
           "\n&#12288;‚úí –î–Ω–∏–∫ {id} {–Ω–∏–∫} - –∏–∑–º–µ–Ω–∏—Ç—å —á—É–∂–æ–π –Ω–∏–∫ (–æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)" \
           "\n&#12288;üë• Users - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ—Ç –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞)" \
           "\n&#12288;‚õî gban {id} {–ø—Ä–∏—á–∏–Ω–∞} - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)" \
           "\n&#12288;‚õî unban {id} - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞)"

def prophelp():
    return "\nüè° –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º—É—â–µ—Å—Ç–≤–æ–º" \
           "\n&#12288;üìï –ú–∞–≥–∞–∑–∏–Ω - —Ç—É—Ç –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤—Å—ë, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ" \
           "\n" \
           "\n–ü–æ–∫—É–ø–∫–∞:" \
           "\n&#12288;üìï –ö–º–∞—à–∏–Ω—É {–Ω–æ–º–µ—Ä} - –ü–æ–∫—É–ø–∫–∞ –º–∞—à–∏–Ω—ã" \
           "\n&#12288;üìï –ö–¥–æ–º {–Ω–æ–º–µ—Ä} - –ü–æ–∫—É–ø–∫–∞ –¥–æ–º–∞" \
           "\n&#12288;üìï –ö—Ç–µ–ª {–Ω–æ–º–µ—Ä} - –ü–æ–∫—É–ø–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞" \
           "\n&#12288;üìï –ö–∫–∞—Ä—Ç—É {–Ω–æ–º–µ—Ä} - –ü–æ–∫—É–ø–∫–∞ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã" \
           "\n" \
           "\n–ü—Ä–æ–¥–∞–∂–∞:" \
           "\n&#12288;üìï –ü–º–∞—à–∏–Ω—É {–Ω–æ–º–µ—Ä} - –ü—Ä–æ–¥–∞–∂–∞ –º–∞—à–∏–Ω—ã" \
           "\n&#12288;üìï –ü–¥–æ–º {–Ω–æ–º–µ—Ä} - –ü—Ä–æ–¥–∞–∂–∞ –¥–æ–º–∞" \
           "\n&#12288;üìï –ü—Ç–µ–ª {–Ω–æ–º–µ—Ä} - –ü—Ä–æ–¥–∞–∂–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞" \
           "\n&#12288;üìï –ü–∫–∞—Ä—Ç—É {–Ω–æ–º–µ—Ä} - –ø—Ä–æ–¥–∞–∂–∞ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã"

def gstats(id):
    with open('json/' + str(id) + '.json') as f:
        ff = json.loads(f.read())
    twin = ff["kwin"] + ff["mwin"]
    tlose = ff["klose"] + ff["mlose"]
    return "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–≥—Ä–∞–º\n\nüé∞ –ö–∞–∑–∏–Ω–æ\n&#12288;üìà –í—Å–µ–≥–æ –≤—ã–∏–≥—Ä–∞–Ω–æ –≤ –∫–∞–∑–∏–Ω–æ: " + str(ff["kwin"]) + "$" + " \n&#12288;üìâ –í—Å–µ–≥–æ –ø—Ä–æ–∏–≥—Ä–∞–Ω–æ –≤ –∫–∞–∑–∏–Ω–æ: " + str(ff["klose"]) + "$" + "\nü¶Ö –ú–æ–Ω–µ—Ç–∫–∞\n&#12288;üìà –í—Å–µ–≥–æ –≤—ã–∏–≥—Ä–∞–Ω–æ –≤ –º–æ–Ω–µ—Ç–∫–µ: " + str(ff["mwin"]) + "$" + " \n&#12288;üìâ –í—Å–µ–≥–æ –ø—Ä–æ–∏–≥—Ä–∞–Ω–æ –≤ –º–æ–Ω–µ—Ç–∫–µ: " + str(ff["mlose"]) + "$" + " \n\nüìà–í—Å–µ–≥–æ –≤—ã–∏–≥—Ä–∞–Ω–æ: " + str(twin) + "$" + " \nüìâ–í—Å–µ–≥–æ –ø—Ä–æ–∏–≥—Ä–∞–Ω–æ: " + str(tlose) + "$"

def getanekdot():
    z = ''
    s = requests.get('http://anekdotme.ru/random')
    b = bs4.BeautifulSoup(s.text, "html.parser")
    p = b.select('.anekdot_text')
    for x in p:
        s = (x.getText().strip())
        z = z + s + '\n\n'
    return s

def stats2(nick, idd):
    url = "https://call-of-duty-modern-warfare.p.rapidapi.com/multiplayer/" + nick + "%23" + idd + "/battle"

    headers = {
        'x-rapidapi-key': "3d7ffcf6eemsheb0b038baa4b97ep118126jsnd220b4b88e25",
        'x-rapidapi-host': "call-of-duty-modern-warfare.p.rapidapi.com",
    }
    time.sleep(1)
    response = requests.request("GET", url, headers=headers)
    r = str(response.text).split(",")
    p=["level", "levelXpRemainder", "levelXpGained", "prestige"]
    a=[]
    b=[]
    c=0
    for i in range (len(r)):
        for j in range(len(p)):
            if p[j] in r[i+c] and p[j] not in a:
                a.append(i)
                ++c
                break
    a = a[0:(len(p))]
    a = list(map(int, a))
    for i in range (len(a)):
        b.append(r[a[i]])
    if len(r) > 3:
        #level
        lvl = "\nüè∑–£—Ä–æ–≤–µ–Ω—å: " + b[0][8:]
        #prestige
        pr = "\nüî∞–ü—Ä–µ—Å—Ç–∏–∂: " + b[3][11:]
        #lvlxp
        lvlxp = "\nüìã–ü—Ä–æ–≥—Ä–µ—Å—Å —É—Ä–æ–≤–Ω—è: " + b[1][19:] + "/" + b[2][16:] + "\n"
        stat2 = lvl + pr + lvlxp
        return stat2
    else:
        return 0

def stats(nick, idd):
    url = "https://call-of-duty-modern-warfare.p.rapidapi.com/warzone/" + nick + "%23" + idd + "/battle"

    headers = {
        'x-rapidapi-key': "3d7ffcf6eemsheb0b038baa4b97ep118126jsnd220b4b88e25",
        'x-rapidapi-host': "call-of-duty-modern-warfare.p.rapidapi.com",
    }

    response = requests.request("GET", url, headers=headers)
    r = str(response.text).split(",")
    if len(r) > 3:
        # WINS
        wins = "\nüéâ–ü–æ–±–µ–¥: " + r[0][14:999]
        # KILLS
        kills = "\nü•¥–£–±–∏–π—Å—Ç–≤: " + r[1][8:999]
        # KD
        kd = "\nüìà–ö/–î: " + r[2][10:14]
        # DEATHS
        deaths = "\n‚ò†–°–º–µ—Ä—Ç–µ–π: " + r[15][9:999]
        # top25
        top25 = "\n2Ô∏è‚É£5Ô∏è‚É£–¢–æ–ø-25: " + r[4][16:999]
        # top10
        top10 = "\n1Ô∏è‚É£0Ô∏è‚É£–¢–æ–ø-10: " + r[5][9:999]
        # contracts
        contracts = "\nüéü–ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã: " + r[6][12:999]
        # revives
        revives = "\n‚ûï–ü–æ–¥–Ω—è—Ç–∏–π: " + r[7][10:999]
        # DOWNS
        downs = "\nüîª–ù–æ–∫–¥–∞—É–Ω—ã: " + r[3][8:999]
        # top5
        top5 = "\n5Ô∏è‚É£–¢–æ–ø-5: " + r[8][10:999]
        # matches
        matches = "\n\n‚å®–í—Å–µ–≥–æ –∏–≥—Ä: " + r[11][14:999]
        # score
        score = "\nüí°–í—Å–µ–≥–æ EXP: " + r[9][8:999]
        # scorePM
        spm = r[13][17:999]
        sppm = round(float(spm))
        scorePM = "\nüéõEXP –≤ –º–∏–Ω—É—Ç—É: " + str(sppm)
        # timeplayed
        ttt = (datetime.timedelta(seconds=int(r[10][13:999])))
        totaltime = "\nüíª–í—Å–µ–≥–æ –æ—Ç—ã–≥—Ä–∞–Ω–æ –≤—Ä–µ–º–µ–Ω–∏: " + str(ttt)
        # avgkills
        avgk = int(r[1][8:999]) / int(r[11][14:999])
        avgkills = "\nüòµ–°—Ä.–£–±–∏–π—Å—Ç–≤: " + str(round(avgk, 2))
        stat = "üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ " + nick + "#" + idd + matches + "\n" + kills + avgkills + "\n" + downs + revives + "\n" + deaths + "\n" + kd + "\n" + wins + "\n" + score + scorePM + contracts + "\n" + stats2(nick, idd) + top5 + top10 + top25 + "\n" + totaltime + "\n\nby @gamtz" + ver
        vk.method("messages.send", {"peer_id": id, "message": stat, "random_id": random.randint(1, 2147483647)})
    else:
        vk.method("messages.send", {"peer_id": id,
                                    "message": "‚ö†–û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∏–∫ –∏ id‚ö†\n–¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ "
                                               "–ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ —Å—Ç–∞—Ç—å–µ: vk.com/@cod_stats-help",
                                    "random_id": random.randint(1, 2147483647)})

def stats20(nick, idd):
    a = []
    p = ["kills", "headshots", "killsPerGame", "headshotPercentage", "objectiveTeamWiped", "assists", "deaths",
         "kdRatio", "score", "scorePerMinute", "gulagKills", "gulagDeaths", "damageDone", "damageTaken",
         "distanceTraveled", "avgLifeTime", "timePlayed"]
    url = "https://call-of-duty-modern-warfare.p.rapidapi.com/warzone-matches/" + nick + "%23" + idd + "/battle"
    headers = {
        'x-rapidapi-key': "3d7ffcf6eemsheb0b038baa4b97ep118126jsnd220b4b88e25",
        'x-rapidapi-host': "call-of-duty-modern-warfare.p.rapidapi.com"
    }
    response = requests.request("GET", url, headers=headers)
    r = str(response.text).split(",")
    c = 0
    for i in range(len(r)):
        for j in range(len(p)):
            if p[j] in r[i + c] and p[j] not in a:
                a.append(i)
                var = ++c
                break
    a = a[0:(len(p))]
    a = list(map(int, a))
    if len(r) > 3:
        #    kills
        kills = "\n\nü•¥–£–±–∏–π—Å—Ç–≤: " + r[a[0]][27:999]
        #    fsquad
        fsquad = "\nüë•–°–∫–≤–∞–¥–æ–≤ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–æ: " + r[a[1]][21:999]
        #    avglife
        if round(float(r[a[2]][14:999])) > 0:
            avgl = round(float(r[a[2]][14:999]))
            avglife = "\n‚åõ–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏: " + str((datetime.timedelta(seconds=int(avgl))))
        else:
            avglife = "\n‚åõ–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏: " + "‚ö†C—ã–≥—Ä–∞–π—Ç–µ –±–æ–ª—å—à–µ –∏–≥—Ä‚ö†"
        #    score
        score = "\nüí°–í—Å–µ–≥–æ exp: " + r[a[3]][8:999]
        #    hs
        hs = "\nüíÄ–£–±–∏–π—Å—Ç–≤–∞ –≤ –≥–æ–ª–æ–≤—É: " + r[a[4]][12:999]
        #    assists
        assists = "\n‚ôª–ü–æ–º–æ—â–∏: " + r[a[5]][10:999]
        #    avgkills
        avgkills = "\nüòµ–°—Ä.—É–±–∏–π—Å—Ç–≤: " + r[a[6]][15:999]
        #    scorepm
        if round(float(r[a[7]][17:999])) > 0:
            scorepm = "\nüéõExp –≤ –º–∏–Ω—É—Ç—É: " + str(round(float(r[a[7]][17:999])))
        else:
            scorepm = "\nüéõExp –≤ –º–∏–Ω—É—Ç—É: " + "‚ö†C—ã–≥—Ä–∞–π—Ç–µ –±–æ–ª—å—à–µ –∏–≥—Ä‚ö†"
        #    distance
        distance = "\nüó∫–ü—Ä–æ–π–¥–µ–Ω–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: " + str(round(float(r[a[8]][19:999]) / 100000))
        #    deaths
        deaths = "\n‚ò†–°–º–µ—Ä—Ç–µ–π: " + r[a[9]][9:999]
        #    kd
        kd = "\nüìà–ö/–î: " + str(round(float(r[a[10]][10:999]), 2))
        #    gulagdeaths
        gdeaths = "\nüï≥–°–º–µ—Ä—Ç–µ–π –≤ –≥—É–ª–∞–≥–µ: " + r[a[11]][14:999]
        #    totaltime
        if round(float(r[a[12]][13:999])) > 0:
            tt = round(float(r[a[12]][13:999]))
            totaltime = "\nüíª–í—Å–µ–≥–æ –æ—Ç—ã–≥—Ä–∞–Ω–æ –≤—Ä–µ–º–µ–Ω–∏: " + str((datetime.timedelta(seconds=int(tt))))
        else:
            totaltime = "\nüíª–í—Å–µ–≥–æ –æ—Ç—ã–≥—Ä–∞–Ω–æ –≤—Ä–µ–º–µ–Ω–∏: " + "‚ö†C—ã–≥—Ä–∞–π—Ç–µ –±–æ–ª—å—à–µ –∏–≥—Ä‚ö†"
        #    hsper
        hsper = "\nüß†–ü—Ä–æ—Ü–µ–Ω—Ç —É–±–∏–π—Å—Ç–≤ –≤ –≥–æ–ª–æ–≤—É: " + str(round(float(r[a[13]][21:999]), 2))
        #    gulagkills
        gkills = "\nüëÆ–£–±–∏–π—Å—Ç–≤ –≤ –≥—É–ª–∞–≥–µ: " + r[a[14]][13:999]
        #    damagegive
        gdamage = "\nüî´–ù–∞–Ω–µ—Å–µ–Ω–æ —É—Ä–æ–Ω–∞: " + r[a[15]][13:999]
        #    damagetaken
        td = r[a[16]].split("}")
        tdamage = "\nü•ä–ü–æ–ª—É—á–µ–Ω–æ —É—Ä–æ–Ω–∞: " + td[0][14:999]
        #   gulagkd
        gkd = "\nüìä–ì—É–ª–∞–≥ –ö/–î: " + str(round(float(int(gkills[20:999]) / int(gdeaths[20:999])), 2))

        stat20 = "üìä—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ " + nick + "#" + idd + " –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –º–∞—Ç—á–µ–π" + kills + hs + avgkills + hsper + fsquad + "\n" + assists + "\n" + deaths + "\n" + kd + "\n" + score + scorepm + "\n" + gkills + gdeaths + gkd + "\n" + gdamage + tdamage + "\n" + distance + avglife + totaltime + "\n\nby @gamtz" + ver
        vk.method("messages.send", {"peer_id": id, "message": stat20, "random_id": random.randint(1, 2147483647)})
    else:
        vk.method("messages.send", {"peer_id": id,
                                    "message": "‚ö†–û—à–∏–±–∫–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∏–∫ –∏ id‚ö†\n–¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏.\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ —Å—Ç–∞—Ç—å–µ: vk.com/@cod_stats-help",
                                    "random_id": random.randint(1, 2147483647)})

def uplf(iddd, purl):
    global d
    p = requests.get(purl[1])
    out = open("films/" + iddd + ".jpg", "wb")
    out.write(p.content)
    out.close()

    a = vk.method("photos.getMessagesUploadServer")
    b = requests.post(a['upload_url'], files={'photo': open('films/' + iddd + '.jpg', 'rb')}).json()
    c = vk.method('photos.saveMessagesPhoto', {'photo': b['photo'], 'server': b['server'], 'hash': b['hash']})[0]
    d = "photo{}_{}".format(c["owner_id"], c["id"])

def rfilm():
    global iddd
    iddd = str(random.randrange(1, 99999))
    url = 'https://kinopoiskapiunofficial.tech/api/v2.1/films/' + iddd
    headers = {
        'X-API-KEY': '79e32931-ef2c-4921-9e01-dac1d164971b',
    }
    response = requests.get(url, headers=headers)
    r = str(response.text).split(",")
    p=["nameRu", "webUrl", "posterUrl", "posterUrlPreview", "year"]
    a=[]
    b=[]
    c=0
    for i in range(len(r)):
        for j in range(len(p)):
            if p[j] in r[i+c] and p[j] not in a:
                a.append(i)
                ++c
                break
    a = a[0:(len(p))]
    a = list(map(int, a))
    for i in range(len(a)):
        b.append(r[a[i]])
    #
    name = '–ù–∞–∑–≤–∞–Ω–∏–µ: ' + b[0][9:]
    #
    kkurl = (b[1][9:]).split('"')
    kurl = '–°—Å—ã–ª–∫–∞ –Ω–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫: ' + kkurl[1]
    #
    purl = (b[2][12:]).split('"')
    #
    year = '–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: ' + (b[4][7:])
    res = name + "\n" + year + '\n' + kurl
    uplf (iddd, purl)
    return (res)

def levels():
    return "üìö –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–≤–Ω—è—Ö:" \
           "\n\n–í—Å–µ–≥–æ 5 —É—Ä–æ–≤–Ω–µ–π:" \
           "\n1 —É—Ä–æ–≤–µ–Ω—å - 0-50 –æ–ø—ã—Ç–∞" \
           "\n2 —É—Ä–æ–≤–µ–Ω—å - 51-150 –æ–ø—ã—Ç–∞" \
           "\n3 —É—Ä–æ–≤–µ–Ω—å - 151-300 –æ–ø—ã—Ç–∞" \
           "\n4 —É—Ä–æ–≤–µ–Ω—å - 301-500 –æ–ø—ã—Ç–∞" \
           "\n5 —É—Ä–æ–≤–µ–Ω—å - 500+ –æ–ø—ã—Ç–∞" \
           "\n\n–ù–∞ –∫–∞–∂–¥–æ–º —É—Ä–æ–≤–Ω–µ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è –Ω–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã" \
           "\n–ß—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –æ–ø—ã—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–±–æ—Ç–∞—Ç—å [—Ä–∞–±–æ—Ç—ã]" \
           "\n–ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 5 —É—Ä–æ–≤–Ω—è,–æ–ø—ã—Ç –Ω–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è"

def lvlcheck(id):
    with open('json/' + str(id) + '.json') as f:
        ff = json.loads(f.read())

    if ff["exp"] > 50 and ff["level"] == 1:
        ff["level"] = 2
        with open('json/' + str(id) + '.json', 'w') as f:
            f.write(json.dumps(ff, indent=4))
        vk.method("messages.send", {"peer_id": id,
                                "message": "üíé –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø–æ–≤—ã—Å–∏–ª–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –¥–æ " + str(ff["level"]),
                                "random_id": random.randint(1, 2147483647)})
        return

    if ff["exp"] > 150 and ff["level"] == 2:
        ff["level"] = 3
        with open('json/' + str(id) + '.json', 'w') as f:
            f.write(json.dumps(ff, indent=4))
        vk.method("messages.send", {"peer_id": id,
                                "message": "üíé –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø–æ–≤—ã—Å–∏–ª–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –¥–æ " + str(ff["level"]),
                                "random_id": random.randint(1, 2147483647)})
        return

    if ff["exp"] > 300 and ff["level"] == 3:
        ff["level"] = 4
        with open('json/' + str(id) + '.json', 'w') as f:
            f.write(json.dumps(ff, indent=4))
        vk.method("messages.send", {"peer_id": id,
                                "message": "üíé –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø–æ–≤—ã—Å–∏–ª–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –¥–æ " + str(ff["level"]),
                                "random_id": random.randint(1, 2147483647)})
        return

    if ff["exp"] >= 500 and ff["level"] == 4:
        ff["level"] = 5
        with open('json/' + str(id) + '.json', 'w') as f:
            f.write(json.dumps(ff, indent=4))
        vk.method("messages.send", {"peer_id": id,
                                "message": "üíé –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø–æ–≤—ã—Å–∏–ª–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –¥–æ " + str(ff["level"]),
                                "random_id": random.randint(1, 2147483647)})
        return

def lvlchk2(id,lvl):
    with open('json/' + str(id) + '.json') as f:
        ff = json.loads(f.read())
    if lvl <= ff["level"]:
        return "‚úÖ"
    else:
        return "‚õî"

def works(id):

    s= "–°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç:" \
           "\n\n" \
           + str(lvlchk2(id,1)) + " 1 —É—Ä–æ–≤–µ–Ω—å" \
           "\n&#12288;1) üöï FakeTAXI - 100$ | 20 —Å–µ–∫—É–Ω–¥ | 2 –æ–ø—ã—Ç–∞" \
           "\n&#12288;2) üë®‚Äçüåæ –§–µ—Ä–º–∞ - 180$ | 40 —Å–µ–∫—É–Ω–¥ | 4 –æ–ø—ã—Ç–∞" \
           "\n\n" \
           + str(lvlchk2(id,2)) + " 2 —É—Ä–æ–≤–µ–Ω—å" \
           "\n&#12288;3) üíª –¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –∏–≥—Ä - 420$ | 1 –º–∏–Ω—É—Ç–∞ | 6 –æ–ø—ã—Ç–∞" \
           "\n&#12288;4) ‚òï –†–∞–±–æ—Ç–Ω–∏–∫ –∫–æ—Ñ–µ–π–Ω–∏ - 600$ | 1:30 –º–∏–Ω—É—Ç—ã | 9 –æ–ø—ã—Ç–∞" \
           "\n\n" \
           + str(lvlchk2(id,3)) + " 3 —É—Ä–æ–≤–µ–Ω—å" \
           "\n&#12288;5) üè≠ –†–∞–±–æ—á–∏–π –Ω–∞ –∑–∞–≤–æ–¥–µ - 1 080$ | 2 –º–∏–Ω—É—Ç—ã | 12 –æ–ø—ã—Ç–∞" \
           "\n&#12288;6) üç∑ –î–µ–≥—É—Å—Ç–∞—Ç–æ—Ä –≤–∏–Ω–∞ - 1 600$ | 3 –º–∏–Ω—É—Ç—ã | 18 –æ–ø—ã—Ç–∞" \
           "\n\n" \
           + str(lvlchk2(id,4)) + " 4 —É—Ä–æ–≤–µ–Ω—å" \
           "\n&#12288;7) üí® –ü—Ä–æ–¥–∞–≤–µ—Ü –≤ Verdax - 3 600$ | 5 –º–∏–Ω—É—Ç | 30 –æ–ø—ã—Ç–∞" \
           "\n&#12288;8) üå∏ –î–∏–∑–∞–π–Ω–µ—Ä - 7 000$ | 10 –º–∏–Ω—É—Ç | 60 –æ–ø—ã—Ç–∞" \
           "\n\n" \
           + str(lvlchk2(id,5)) + " 5 —É—Ä–æ–≤–µ–Ω—å" \
           "\n&#12288;9) üç• –†–µ–∂–∏—Å—Å—ë—Ä –ê–Ω–∏–º–µ - 18 000$ | 20 –º–∏–Ω—É—Ç" \
           "\n&#12288;10) üëΩ –î–∏—Ä–µ–∫—Ç–æ—Ä Natflex - 36 000$ | 40 –º–∏–Ω—É—Ç" \
           "\n\n" \
           "\n–ß—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '—Ä–∞–±–æ—Ç–∞—Ç—å {–Ω–æ–º–µ—Ä}'"
    return s

def work(id,work):
    with open('json/' + str(id) + '.json') as f:
        ff = json.loads(f.read())

    if ff["wstatus"] == False:
        if ff["level"] >= 1:
            if work == "1":
                ff["wstatus"] = True
                threading.Timer(20.0, workend, args=(id, work,)).start()
                with open('json/' + str(id) + '.json', 'w') as f:
                    f.write(json.dumps(ff, indent=4))
                return "‚úÖ –í—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ FakeTAXI! \n–ó–∞–∫–æ–Ω—á–∏—Ç–µ —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥"

            if work == "2":
                ff["wstatus"] = True
                threading.Timer(40.0, workend, args=(id, work,)).start()
                with open('json/' + str(id) + '.json', 'w') as f:
                    f.write(json.dumps(ff, indent=4))
                return "‚úÖ –í—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –§–µ—Ä–º–µ! \n–ó–∞–∫–æ–Ω—á–∏—Ç–µ —á–µ—Ä–µ–∑ 40 —Å–µ–∫—É–Ω–¥"

        if ff["level"] >= 2:
            if work == "3":
                ff["wstatus"] = True
                threading.Timer(60.0, workend, args=(id, work,)).start()
                with open('json/' + str(id) + '.json', 'w') as f:
                    f.write(json.dumps(ff, indent=4))
                return "‚úÖ –í—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–æ–º –∏–≥—Ä! \n–ó–∞–∫–æ–Ω—á–∏—Ç–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É"

            if work == "4":
                ff["wstatus"] = True
                threading.Timer(90.0, workend, args=(id, work,)).start()
                with open('json/' + str(id) + '.json', 'w') as f:
                    f.write(json.dumps(ff, indent=4))
                return "‚úÖ –í—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ—Ñ–µ–π–Ω–µ! \n–ó–∞–∫–æ–Ω—á–∏—Ç–µ —á–µ—Ä–µ–∑ 1:30 –º–∏–Ω—É—Ç—ã"
        else:
            return "–£ –≤–∞—Å —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å! \n–ù–µ–æ–±—Ö–æ–¥–∏–º: 2\n–í–∞—à —É—Ä–æ–≤–µ–Ω—å: " + str(ff["level"])

        if ff["level"] >= 3:
            if work == "5":
                ff["wstatus"] = True
                threading.Timer(120.0, workend, args=(id, work,)).start()
                with open('json/' + str(id) + '.json', 'w') as f:
                    f.write(json.dumps(ff, indent=4))
                return "‚úÖ –í—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –ó–∞–≤–æ–¥–µ! \n–ó–∞–∫–æ–Ω—á–∏—Ç–µ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã"

            if work == "6":
                ff["wstatus"] = True
                threading.Timer(180.0, workend, args=(id, work,)).start()
                with open('json/' + str(id) + '.json', 'w') as f:
                    f.write(json.dumps(ff, indent=4))
                return "‚úÖ –í—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –î–µ–≥—É—Å—Ç–∞—Ç–æ—Ä–æ–º –≤–∏–Ω–∞! \n–ó–∞–∫–æ–Ω—á–∏—Ç–µ —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã"
        else:
            return "–£ –≤–∞—Å —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å! \n–ù–µ–æ–±—Ö–æ–¥–∏–º: 3\n–í–∞—à —É—Ä–æ–≤–µ–Ω—å: " + str(ff["level"])

        if ff["level"] >= 4:
            if work == "7":
                ff["wstatus"] = True
                threading.Timer(300.0, workend, args=(id, work,)).start()
                with open('json/' + str(id) + '.json', 'w') as f:
                    f.write(json.dumps(ff, indent=4))
                return "‚úÖ –í—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –≤ Verdax'e! \n–ó–∞–∫–æ–Ω—á–∏—Ç–µ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç"

            if work == "8":
                ff["wstatus"] = True
                threading.Timer(600.0, workend, args=(id, work,)).start()
                with open('json/' + str(id) + '.json', 'w') as f:
                    f.write(json.dumps(ff, indent=4))
                return "‚úÖ –í—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –î–∏–∑–∞–π–Ω–µ—Ä–æ–º! \n–ó–∞–∫–æ–Ω—á–∏—Ç–µ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç"
        else:
            return "–£ –≤–∞—Å —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å! \n–ù–µ–æ–±—Ö–æ–¥–∏–º: 4\n–í–∞—à —É—Ä–æ–≤–µ–Ω—å: " + str(ff["level"])

        if ff["level"] >= 5:
            if work == "9":
                ff["wstatus"] = True
                threading.Timer(1200.0, workend, args=(id, work,)).start()
                with open('json/' + str(id) + '.json', 'w') as f:
                    f.write(json.dumps(ff, indent=4))
                return "‚úÖ –í—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –†–µ–∂–∏—Å—Å—ë—Ä–æ–º –ê–Ω–∏–º–µ! \n–ó–∞–∫–æ–Ω—á–∏—Ç–µ —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç"

            if work == "10":
                ff["wstatus"] = True
                threading.Timer(2400.0, workend, args=(id, work,)).start()
                with open('json/' + str(id) + '.json', 'w') as f:
                    f.write(json.dumps(ff, indent=4))
                return "‚úÖ –í—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –î–∏—Ä–µ–∫—Ç–æ—Ä–æ–º Natflex'a! \n–ó–∞–∫–æ–Ω—á–∏—Ç–µ —á–µ—Ä–µ–∑ 40 –º–∏–Ω—É—Ç"
        else:
            return "–£ –≤–∞—Å —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å! \n–ù–µ–æ–±—Ö–æ–¥–∏–º: 5\n–í–∞—à —É—Ä–æ–≤–µ–Ω—å: " + str(ff["level"])
    else:
        return "‚ö† –í—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ!"

def workend(id,work):
    with open('json/' + str(id) + '.json') as f:
        ff = json.loads(f.read())
    if work == "1":
        slr = 100
        exp = 2
    if work == "2":
        slr = 180
        exp = 4
    if work == "3":
        slr = 420
        exp = 6
    if work == "4":
        slr = 600
        exp = 9
    if work == "5":
        slr = 1080
        exp = 12
    if work == "6":
        slr = 1600
        exp = 18
    if work == "7":
        slr = 3600
        exp = 30
    if work == "8":
        slr = 7000
        exp = 60
    if work == "9":
        slr = 18000
        exp = 0
    if work == "10":
        slr = 36000
        exp = 0

    ff["wstatus"] = False
    ff["balance"] += slr
    if ff["level"] < 5:
        ff["exp"] += exp
    with open('json/' + str(id) + '.json', 'w') as f:
        f.write(json.dumps(ff, indent=4))
    lvlcheck(id)
    if work == "9" or work == "10":
        vk.method("messages.send", {"peer_id": id,
                                    "message": "üíé –í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Ä–∞–±–æ—Ç—É!\n–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ: \n" + str(
                                        slr) + "$",
                                    "random_id": random.randint(1, 2147483647)})
    else:
        vk.method("messages.send", {"peer_id": id,
                                    "message": "üíé –í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Ä–∞–±–æ—Ç—É!\n–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ: \n" + str(slr) + "$" + " –∏ " + str(exp) + " –æ–ø—ã—Ç–∞",
                                    "random_id": random.randint(1, 2147483647)})

def report(id, msg):
    if len(msg) <= 100:
        vk.method("messages.send", {"peer_id": 419760643,
                                    "message": "‚ö† –†–µ–ø–æ—Ä—Ç | vk.com/gim196468884?sel=" + id + " | " + msg,
                                    "random_id": random.randint(1, 2147483647)})
        return "‚úÖ –†–µ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!"
    else:
        return "‚ö† –í–∞—à —Ä–µ–ø–æ—Ä—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç 100 —Å–∏–º–≤–æ–ª–æ–≤"

def cgbonus(id):
    vk.method("messages.send", {"peer_id": id,
                                "message": "üíé –í–∞–º —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –±–æ–Ω—É—Å!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–±–æ–Ω—É—Å', —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ",
                                "keyboard": bonusmenu.get_keyboard(),
                                "random_id": random.randint(1, 2147483647)})

def gbonus(id):
    with open('json/' + str(id) + '.json') as f:
        ff = json.loads(f.read())
    o = (int(time.time()) - (ff["lbonus"] + 300)) * -1
    if (int(time.time())) - ff["lbonus"] >= 300:
        ff["balance"] += 300
        ff["lbonus"] = int(time.time())
        with open('json/' + str(id) + '.json', 'w') as f:
            f.write(json.dumps(ff, indent=4))
        threading.Timer(300.0, cgbonus, args=(id,)).start()
        vk.method("messages.send", {"peer_id": id,
                                    "sticker_id": 8484,
                                    "random_id": random.randint(1, 2147483647)})
        return "üíé –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ 300$!\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"
    else:
        return "–ë–æ–Ω—É—Å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç!\n–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ " + str(o) + " —Å–µ–∫—É–Ω–¥"

def idsearch(id):
    path = "json/"
    f=os.listdir(path)
    for i in range (len(f)):
        f[i] = str(f[i][:-5])
    id_ = id.split('/')[-1]
    try:
        id = str(vk.method('users.get', {'user_ids': id_})[0]['id'])
    except:
        return "–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n–∏–¥ vk.com/gamtz"
    if id in f:
        try:
            return "üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + id + "\nüëî –ü–µ—Ä—Å–æ–Ω–∞–ª: " + ifstaff(int(id))
        except:
            return "–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n–∏–¥ vk.com/gamtz"
    else:
        return "–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"

def congrts(id):
    vk.method("messages.send", {"peer_id": id,
                                "sticker_id": 11788,
                                "random_id": random.randint(1, 2147483647)})

# –ú–∞–≥–∞–∑–∏–Ω
def shop():
    return "–ú–∞–≥–∞–∑–∏–Ω:" \
           "\n" \
           "\n&#12288;üöó –ú–∞—à–∏–Ω—ã" \
           "\n&#12288;üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã" \
           "\n&#12288;üè° –î–æ–º–∞" \
           "\n&#12288;üéû –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã" \
           "\n" \
           "\nüìå–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"

def sell():
    return "–ü—Ä–æ–¥–∞–∂–∞:" \
           "\n" \
           "\n&#12288;üöó –ü–º–∞—à–∏–Ω—É - –ü—Ä–æ–¥–∞—Ç—å —Å–≤–æ—é –º–∞—à–∏–Ω—É" \
           "\n&#12288;üì± –ü—Ç–µ–ª - –ü—Ä–æ–¥–∞—Ç—å —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω" \
           "\n&#12288;üè° –ü–¥–æ–º - –ü—Ä–æ–¥–∞—Ç—å —Å–≤–æ–π –¥–æ–º" \
           "\n&#12288;üéû –ü–∫–∞—Ä—Ç—É - –ü—Ä–æ–¥–∞—Ç—å —Å–≤—é –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É"

def cars():
    return "üöó –ú–∞—à–∏–Ω—ã:" \
           "\n" \
           "\n&#12288;üíé 1. –í–ê–ó 2115 | 2.000$" \
           "\n&#12288;üíé 2. LADA Vesta | 4.000$" \
           "\n&#12288;üíé 3. Audi Q7 | 8.000$" \
           "\n&#12288;üíé 4. BMW M8 | 15.000$" \
           "\n&#12288;üíé 5. Range Rover | 50.000$" \
           "\n&#12288;üíé 6. Rolls-Royce | 150.000$" \
           "\n" \
           "\nüìå–î–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–∫–º–∞—à–∏–Ω—É [–Ω–æ–º–µ—Ä]'\n" \
           "–ù–∞–ø—Ä–∏–º–µ—Ä: –∫–º–∞—à–∏–Ω—É 1"

def phones():
    return "üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã:" \
           "\n" \
           "\n&#12288;üíé 1. Fly Ezzy Flip | 200$" \
           "\n&#12288;üíé 2. Sony Xperia XA1 | 1.000$" \
           "\n&#12288;üíé 3. Xiaomi Mi 11 | 10.000$" \
           "\n&#12288;üíé 4. Samsung Galaxy S21 | 50.000$" \
           "\n&#12288;üíé 5. iPhone 12 | 200.000$" \
           "\n" \
           "\nüìå–î–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–∫—Ç–µ–ª [–Ω–æ–º–µ—Ä]'\n" \
           "–ù–∞–ø—Ä–∏–º–µ—Ä: –∫—Ç–µ–ª 1"

def homes():
    return "üè° –î–æ–º–∞:" \
           "\n" \
           "\n&#12288;üíé 1. –ö–∞—Ä—Ç–æ–Ω–Ω–∞—è –∫–æ—Ä–æ–±–∫–∞ | 100$" \
           "\n&#12288;üíé 2. –î–æ–º –Ω–∞ –¥–µ—Ä–µ–≤–µ | 2.000$" \
           "\n&#12288;üíé 3. –î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –¥–æ–º | 10.000$" \
           "\n&#12288;üíé 4. –ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤ –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–µ | 50.000$" \
           "\n&#12288;üíé 5. –û—Å–æ–±–Ω—è–∫ | 150.000$" \
           "\n&#12288;üíé 6. –î–æ–º –Ω–∞ –†—É–±–ª—ë–≤–∫–µ | 300.000$" \
           "\n&#12288;üíé 7. –õ–∏—á–Ω—ã–π –æ—Å—Ç—Ä–æ–≤ | 500.000$" \
           "\n&#12288;üíé 8. –î–≤–æ—Ä–µ—Ü –≤ –ì–µ–ª–µ–Ω–¥–∂–∏–∫–µ | 1.000.000$" \
           "\n" \
           "\nüìå–î–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–∫–¥–æ–º [–Ω–æ–º–µ—Ä]'\n" \
           "–ù–∞–ø—Ä–∏–º–µ—Ä: –∫–¥–æ–º 1"

#–º–∞—à–∏–Ω—ã
def bcar(id, n):
    with open('json/' + str(id) + '.json') as f:
        ff = json.loads(f.read())
    if ff["car"] == "":
        if n == '1' and ff["balance"] >= 2000:
            ff["balance"] -= 2000
            ff["car"] = "–í–ê–ó 2115"
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            congrts(id)
            return "–í—ã –∫—É–ø–∏–ª–∏ " + str(ff["car"]) + " –∑–∞ 2.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif n == '2' and ff["balance"] >= 4000:
            ff["balance"] -= 4000
            ff["car"] = "LADA Vesta"
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            congrts(id)
            return "–í—ã –∫—É–ø–∏–ª–∏ " + str(ff["car"]) + " –∑–∞ 4.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif n == '3' and ff["balance"] >= 8000:
            ff["balance"] -= 8000
            ff["car"] = "Audi Q7"
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            congrts(id)
            return "–í—ã –∫—É–ø–∏–ª–∏ " + str(ff["car"]) + " –∑–∞ 8.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif n == '4' and ff["balance"] >= 15000:
            ff["balance"] -= 15000
            ff["car"] = "BMW M8"
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            congrts(id)
            return "–í—ã –∫—É–ø–∏–ª–∏ " + str(ff["car"]) + " –∑–∞ 15.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif n == '5' and ff["balance"] >= 50000:
            ff["balance"] -= 50000
            ff["car"] = "Range Rover"
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            congrts(id)
            return "–í—ã –∫—É–ø–∏–ª–∏ " + str(ff["car"]) + " –∑–∞ 50.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif n == '6' and ff["balance"] >= 150000:
            ff["balance"] -= 150000
            ff["car"] = "Rolls-Royce"
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            congrts(id)
            return "–í—ã –∫—É–ø–∏–ª–∏ " + str(ff["car"]) + " –∑–∞ 150.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"
        else:
            return "–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –∏–ª–∏ –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∫–æ–º–∞–Ω–¥—É!\n–ü—Ä–∏–º–µ—Ä: –∫–º–∞—à–∏–Ω—É 1"
    else:
        return "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –º–∞—à–∏–Ω–∞ –∏–ª–∏ –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∫–æ–º–∞–Ω–¥—É!\n–ü—Ä–∏–º–µ—Ä: –∫–º–∞—à–∏–Ω—É 1\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–∞—Ç—å –µ—ë, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ø–º–∞—à–∏–Ω—É'"

def sellcar(id):
    with open('json/' + str(id) + '.json') as f:
        ff = json.loads(f.read())
    if ff["car"] != "":
        if ff["car"] == "–í–ê–ó 2115":
            ff["car"] = ""
            ff["balance"] += 2000
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            return "–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ—é –º–∞—à–∏–Ω—É –∑–∞ 2.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"
        if ff["car"] == "LADA Vesta":
            ff["car"] = ""
            ff["balance"] += 4000
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            return "–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ—é –º–∞—à–∏–Ω—É –∑–∞ 4.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"
        if ff["car"] == "Audi Q7":
            ff["car"] = ""
            ff["balance"] += 8000
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            return "–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ—é –º–∞—à–∏–Ω—É –∑–∞ 8.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"
        if ff["car"] == "BMW M8":
            ff["car"] = ""
            ff["balance"] += 15000
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            return "–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ—é –º–∞—à–∏–Ω—É –∑–∞ 15.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"
        if ff["car"] == "Range Rover":
            ff["car"] = ""
            ff["balance"] += 50000
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            return "–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ—é –º–∞—à–∏–Ω—É –∑–∞ 50.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"
        if ff["car"] == "Rolls-Royce":
            ff["car"] = ""
            ff["balance"] += 150000
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            return "–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ—é –º–∞—à–∏–Ω—É –∑–∞ 150.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"
    else:
        return '–£ –≤–∞—Å –Ω–µ—Ç –º–∞—à–∏–Ω—ã!'
#–º–∞—à–∏–Ω—ã

#—Ç–µ–ª–µ—Ñ–æ–Ω—ã
def bphone(id, n):
    with open('json/' + str(id) + '.json') as f:
        ff = json.loads(f.read())
    if ff["phone"] == "":
        if n == '1' and ff["balance"] >= 200:
            ff["balance"] -= 200
            ff["phone"] = "Fly Ezzy Flip"
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            congrts(id)
            return "–í—ã –∫—É–ø–∏–ª–∏ " + str(ff["phone"]) + " –∑–∞ 200$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif n == '2' and ff["balance"] >= 1000:
            ff["balance"] -= 1000
            ff["phone"] = "Sony Xperia XA1"
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            congrts(id)
            return "–í—ã –∫—É–ø–∏–ª–∏ " + str(ff["phone"]) + " –∑–∞ 1.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif n == '3' and ff["balance"] >= 10000:
            ff["balance"] -= 10000
            ff["phone"] = "Xiaomi Mi 11"
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            congrts(id)
            return "–í—ã –∫—É–ø–∏–ª–∏ " + str(ff["phone"]) + " –∑–∞ 10.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif n == '4' and ff["balance"] >= 50000:
            ff["balance"] -= 50000
            ff["phone"] = "Samsung Galaxy S21"
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            congrts(id)
            return "–í—ã –∫—É–ø–∏–ª–∏ " + str(ff["phone"]) + " –∑–∞ 50.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif n == '5' and ff["balance"] >= 200000:
            ff["balance"] -= 200000
            ff["phone"] = "iPhone 12"
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            congrts(id)
            return "–í—ã –∫—É–ø–∏–ª–∏ " + str(ff["phone"]) + " –∑–∞ 200.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        else:
            return "–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –∏–ª–∏ –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∫–æ–º–∞–Ω–¥—É!\n–ü—Ä–∏–º–µ—Ä: –∫—Ç–µ–ª 1"
    else:
        return "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∫–æ–º–∞–Ω–¥—É!\n–ü—Ä–∏–º–µ—Ä: –∫—Ç–µ–ª 1\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–∞—Ç—å –µ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ø—Ç–µ–ª'"

def sellphone(id):
    with open('json/' + str(id) + '.json') as f:
        ff = json.loads(f.read())
    if ff["phone"] != "":
        if ff["phone"] == "Fly Ezzy Flip":
            ff["balance"] += 200
            ff["phone"] = ""
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            return "–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –∑–∞ 200$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        if ff["phone"] == "Sony Xperia XA1":
            ff["phone"] = ""
            ff["balance"] += 1000
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            return "–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –∑–∞ 1.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        if ff["phone"] == "Xiaomi Mi 11":
            ff["phone"] = ""
            ff["balance"] += 10000
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            return "–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –∑–∞ 10.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        if ff["phone"] == "Samsung Galaxy S21":
            ff["phone"] = ""
            ff["balance"] += 50000
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            return "–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –∑–∞ 50.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        if ff["phone"] == "iPhone 12":
            ff["phone"] = ""
            ff["balance"] += 200000
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            return "–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –∑–∞ 200.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"
    else:
        return '–£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞!'
#—Ç–µ–ª–µ—Ñ–æ–Ω—ã

#–¥–æ–º–∞
def bhome(id, n):
    with open('json/' + str(id) + '.json') as f:
        ff = json.loads(f.read())
    if ff["home"] == "":
        if n == '1' and ff["balance"] >= 100:
            ff["balance"] -= 100
            ff["home"] = "–ö–∞—Ä—Ç–æ–Ω–Ω–∞—è –∫–æ—Ä–æ–±–∫–∞"
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            congrts(id)
            return "–í—ã –∫—É–ø–∏–ª–∏ " + str(ff["home"]) + " –∑–∞ 100$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif n == '2' and ff["balance"] >= 2000:
            ff["balance"] -= 2000
            ff["home"] = "–î–æ–º –Ω–∞ –¥–µ—Ä–µ–≤–µ"
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            congrts(id)
            return "–í—ã –∫—É–ø–∏–ª–∏ " + str(ff["home"]) + " –∑–∞ 2.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif n == '3' and ff["balance"] >= 10000:
            ff["balance"] -= 10000
            ff["home"] = "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –¥–æ–º"
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            congrts(id)
            return "–í—ã –∫—É–ø–∏–ª–∏ " + str(ff["home"]) + " –∑–∞ 10.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif n == '4' and ff["balance"] >= 50000:
            ff["balance"] -= 50000
            ff["home"] = "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤ –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–µ"
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            congrts(id)
            return "–í—ã –∫—É–ø–∏–ª–∏ " + str(ff["home"]) + " –∑–∞ 50.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif n == '5' and ff["balance"] >= 150000:
            ff["balance"] -= 150000
            ff["home"] = "–û—Å–æ–±–Ω—è–∫"
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            congrts(id)
            return "–í—ã –∫—É–ø–∏–ª–∏ " + str(ff["home"]) + " –∑–∞ 150.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif n == '6' and ff["balance"] >= 300000:
            ff["balance"] -= 300000
            ff["home"] = "–î–æ–º –Ω–∞ –†—É–±–ª—ë–≤–∫–µ"
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            congrts(id)
            return "–í—ã –∫—É–ø–∏–ª–∏ " + str(ff["home"]) + " –∑–∞ 300.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif n == '7' and ff["balance"] >= 500000:
            ff["balance"] -= 500000
            ff["home"] = "–õ–∏—á–Ω—ã–π –æ—Å—Ç—Ä–æ–≤"
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            congrts(id)
            return "–í—ã –∫—É–ø–∏–ª–∏ " + str(ff["home"]) + " –∑–∞ 500.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif n == '8' and ff["balance"] >= 1000000:
            ff["balance"] -= 1000000
            ff["home"] = "–î–≤–æ—Ä–µ—Ü –≤ –ì–µ–ª–µ–Ω–¥–∂–∏–∫–µ"
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            congrts(id)
            return "–í—ã –∫—É–ø–∏–ª–∏ " + str(ff["home"]) + " –∑–∞ 1.000.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        else:
            return "–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –∏–ª–∏ –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∫–æ–º–∞–Ω–¥—É!\n–ü—Ä–∏–º–µ—Ä: –∫–¥–æ–º 1"
    else:
        return "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ–º –∏–ª–∏ –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∫–æ–º–∞–Ω–¥—É!\n–ü—Ä–∏–º–µ—Ä: –∫–¥–æ–º 1\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–∞—Ç—å –µ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ø–¥–æ–º'"

def sellhome(id):
    with open('json/' + str(id) + '.json') as f:
        ff = json.loads(f.read())
    if ff["home"] != "":
        if ff["home"] == "–ö–∞—Ä—Ç–æ–Ω–Ω–∞—è –∫–æ—Ä–æ–±–∫–∞":
            ff["balance"] += 100
            ff["home"] = ""
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            return "–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ–π –¥–æ–º –∑–∞ 100$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif ff["home"] == "–î–æ–º –Ω–∞ –¥–µ—Ä–µ–≤–µ":
            ff["home"] = ""
            ff["balance"] += 2000
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            return "–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ–π –¥–æ–º –∑–∞ 2.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif ff["home"] == "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π –¥–æ–º":
            ff["home"] = ""
            ff["balance"] += 10000
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            return "–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ–π –¥–æ–º –∑–∞ 10.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif ff["home"] == "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤ –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–µ":
            ff["home"] = ""
            ff["balance"] += 50000
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            return "–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ–π –¥–æ–º –∑–∞ 50.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif ff["home"] == "–û—Å–æ–±–Ω—è–∫":
            ff["home"] = ""
            ff["balance"] += 150000
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            return "–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ–π –¥–æ–º –∑–∞ 150.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif ff["home"] == "–î–æ–º –Ω–∞ –†—É–±–ª—ë–≤–∫–µ":
            ff["home"] = ""
            ff["balance"] += 300000
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            return "–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ–π –¥–æ–º –∑–∞ 300.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif ff["home"] == "–õ–∏—á–Ω—ã–π –æ—Å—Ç—Ä–æ–≤":
            ff["home"] = ""
            ff["balance"] += 500000
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            return "–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ–π –¥–æ–º –∑–∞ 500.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif ff["home"] == "–î–≤–æ—Ä–µ—Ü –≤ –ì–µ–ª–µ–Ω–¥–∂–∏–∫–µ":
            ff["home"] = ""
            ff["balance"] += 1000000
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            return "–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ–π –¥–æ–º –∑–∞ 1.000.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"
    else:
        return '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–º–∞!'
#–¥–æ–º–∞
# –ú–∞–≥–∞–∑–∏–Ω

# Bytecoin
#–º–∞–≥–∞–∑–∏–Ω
def fshop():
    return "–ú–∞–≥–∞–∑–∏–Ω –≤–∏–¥–µ–æ–∫–∞—Ä—Ç" \
           "\n–ù–∞–∑–≤–∞–Ω–∏–µ | –î–æ–±—ã—á–∞ | –°—Ç–æ–∏–º–æ—Å—Ç—å" \
           "\n" \
           "\nNvidia:" \
           "\n&#12288;üíé 1. GF 210 | 0.00025 ‚Çø | 10.000$" \
           "\n&#12288;üíé 2. GF GTX 750 Ti | 0.0005 ‚Çø | 50.000$" \
           "\n&#12288;üíé 3. GF GTX 1050 Ti | 0.001 ‚Çø | 100.000$" \
           "\n&#12288;üíé 4. GF GTX 1660S | 0.005 ‚Çø | 300.000$" \
           "\n&#12288;üíé 5. GF RTX 2080S | 0.01 ‚Çø | 500.000$" \
           "\n&#12288;üíé 6. GF RTX 3090 Mining ver | 0.05 ‚Çø | 1.500.000$" \
           "\n" \
           "\nAMD:" \
           "\n&#12288;üíé 7. R5 220 | 0.00025 ‚Çø | 10.000$" \
           "\n&#12288;üíé 8. R7 360 | 0.0005 ‚Çø | 50.000$" \
           "\n&#12288;üíé 9. R9 380 | 0.001 ‚Çø | 100.000$" \
           "\n&#12288;üíé 10. RX 580 | 0.005 ‚Çø | 300.000$" \
           "\n&#12288;üíé 11. RX5700 | 0.01 ‚Çø | 500.000$" \
           "\n&#12288;üíé 12. RX6900XT | 0.05 ‚Çø | 1.500.000$" \
           "\n\nüìå –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–∫–∫–∞—Ä—Ç—É [–Ω–æ–º–µ—Ä]"

def bfarm(id, n):
    with open('json/' + str(id) + '.json') as f:
        ff = json.loads(f.read())
    if ff["gpu"] == "":
        if n == "1" or n == "7": p = 10000
        elif n == "2" or n == "8": p = 50000
        elif n == "3" or n == "9": p = 100000
        elif n == "4" or n == "10": p = 300000
        elif n == "5" or n == "11": p = 500000
        elif n == "6" or n == "12": p = 1500000

        if n == '1' and ff["balance"] >= p:
            ff["balance"] -= p
            ff["gpu"] = "GF 210"
            ff["farm"] = 0.00025
            ff["farming"] = True
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            congrts(id)
            return "–í—ã –∫—É–ø–∏–ª–∏ " + str(ff["gpu"]) + " –∑–∞ " + str(p) + "$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif n == '2' and ff["balance"] >= p:
            ff["balance"] -= p
            ff["gpu"] = "GF GTX 750 Ti"
            ff["farm"] = 0.0005
            ff["farming"] = True
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            congrts(id)
            return "–í—ã –∫—É–ø–∏–ª–∏ " + str(ff["gpu"]) + " –∑–∞ " + str(p) + "$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif n == '3' and ff["balance"] >= p:
            ff["balance"] -= p
            ff["gpu"] = "GF GTX 1050 Ti"
            ff["farm"] = 0.001
            ff["farming"] = True
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            congrts(id)
            return "–í—ã –∫—É–ø–∏–ª–∏ " + str(ff["gpu"]) + " –∑–∞ " + str(p) + "$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif n == '4' and ff["balance"] >= p:
            ff["balance"] -= p
            ff["gpu"] = "GF GTX 1660S"
            ff["farm"] = 0.005
            ff["farming"] = True
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            congrts(id)
            return "–í—ã –∫—É–ø–∏–ª–∏ " + str(ff["gpu"]) + " –∑–∞ " + str(p) + "$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif n == '5' and ff["balance"] >= p:
            ff["balance"] -= p
            ff["gpu"] = "GF RTX 2080S"
            ff["farm"] = 0.01
            ff["farming"] = True
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            congrts(id)
            return "–í—ã –∫—É–ø–∏–ª–∏ " + str(ff["gpu"]) + " –∑–∞ " + str(p) + "$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif n == '6' and ff["balance"] >= p:
            ff["balance"] -= p
            ff["gpu"] = "GF RTX 3090 Mining ver"
            ff["farm"] = 0.05
            ff["farming"] = True
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            congrts(id)
            return "–í—ã –∫—É–ø–∏–ª–∏ " + str(ff["gpu"]) + " –∑–∞ " + str(p) + "$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif n == '7' and ff["balance"] >= p:
            ff["balance"] -= p
            ff["gpu"] = "R5 220"
            ff["farm"] = 0.00025
            ff["farming"] = True
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            congrts(id)
            return "–í—ã –∫—É–ø–∏–ª–∏ " + str(ff["gpu"]) + " –∑–∞ " + str(p) + "$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif n == '8' and ff["balance"] >= p:
            ff["balance"] -= p
            ff["gpu"] = "R7 360"
            ff["farm"] = 0.0005
            ff["farming"] = True
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            congrts(id)
            return "–í—ã –∫—É–ø–∏–ª–∏ " + str(ff["gpu"]) + " –∑–∞ " + str(p) + "$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif n == '9' and ff["balance"] >= p:
            ff["balance"] -= p
            ff["gpu"] = "R9 380"
            ff["farm"] = 0.001
            ff["farming"] = True
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            congrts(id)
            return "–í—ã –∫—É–ø–∏–ª–∏ " + str(ff["gpu"]) + " –∑–∞ " + str(p) + "$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif n == '10' and ff["balance"] >= p:
            ff["balance"] -= p
            ff["gpu"] = "RX 580"
            ff["farm"] = 0.005
            ff["farming"] = True
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            congrts(id)
            return "–í—ã –∫—É–ø–∏–ª–∏ " + str(ff["gpu"]) + " –∑–∞ " + str(p) + "$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif n == '11' and ff["balance"] >= p:
            ff["balance"] -= p
            ff["gpu"] = "RX5700"
            ff["farm"] = 0.01
            ff["farming"] = True
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            congrts(id)
            return "–í—ã –∫—É–ø–∏–ª–∏ " + str(ff["gpu"]) + " –∑–∞ " + str(p) + "$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif n == '12' and ff["balance"] >= p:
            ff["balance"] -= p
            ff["gpu"] = "RX6900XT"
            ff["farm"] = 0.05
            ff["farming"] = True
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            congrts(id)
            return "–í—ã –∫—É–ø–∏–ª–∏ " + str(ff["gpu"]) + " –∑–∞ " + str(p) + "$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        else:
            return "–£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –∏–ª–∏ –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∫–æ–º–∞–Ω–¥—É!\n–ü—Ä–∏–º–µ—Ä: –∫–∫–∞—Ä—Ç—É 1"
    else:
        return "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ –∏–ª–∏ –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∫–æ–º–∞–Ω–¥—É!\n–ü—Ä–∏–º–µ—Ä: –∫–∫–∞—Ä—Ç—É 1\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–∞—Ç—å –µ—ë, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ø–∫–∞—Ä—Ç—É'"

def sfarm(id):
    with open('json/' + str(id) + '.json') as f:
        ff = json.loads(f.read())
    if ff["gpu"] != "":
        if ff["gpu"] == "GF 210":
            ff["balance"] += 10000
            ff["gpu"] = ""
            ff["farm"] = 0.0
            ff["farming"] = False
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            return "–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ—é –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É –∑–∞ 1000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif ff["gpu"] == "GF GTX 750 Ti":
            ff["gpu"] = ""
            ff["balance"] += 50000
            ff["farm"] = 0.0
            ff["farming"] = False
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            return "–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ—é –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É –∑–∞ 50.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif ff["gpu"] == "GF GTX 1050 Ti":
            ff["gpu"] = ""
            ff["balance"] += 100000
            ff["farm"] = 0.0
            ff["farming"] = False
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            return "–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ—é –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É –∑–∞ 100.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif ff["gpu"] == "GF GTX 1660S":
            ff["gpu"] = ""
            ff["balance"] += 300000
            ff["farm"] = 0.0
            ff["farming"] = False
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            return "–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ—é –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É –∑–∞ 300.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif ff["gpu"] == "GF RTX 2080S":
            ff["gpu"] = ""
            ff["balance"] += 500000
            ff["farm"] = 0.0
            ff["farming"] = False
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            return "–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ—é –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É –∑–∞ 500.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif ff["gpu"] == "GF RTX 3090 Mining ver":
            ff["gpu"] = ""
            ff["balance"] += 1500000
            ff["farm"] = 0.0
            ff["farming"] = False
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            return "–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ—é –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É –∑–∞ 1.500.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif ff["gpu"] == "R5 220":
            ff["balance"] += 10000
            ff["gpu"] = ""
            ff["farm"] = 0.0
            ff["farming"] = False
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            return "–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ—é –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É –∑–∞ 1000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif ff["gpu"] == "R7 360":
            ff["gpu"] = ""
            ff["balance"] += 50000
            ff["farm"] = 0.0
            ff["farming"] = False
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            return "–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ—é –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É –∑–∞ 50.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif ff["gpu"] == "R9 380":
            ff["gpu"] = ""
            ff["balance"] += 100000
            ff["farm"] = 0.0
            ff["farming"] = False
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            return "–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ—é –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É –∑–∞ 100.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif ff["gpu"] == "RX 580":
            ff["gpu"] = ""
            ff["balance"] += 300000
            ff["farm"] = 0.0
            ff["farming"] = False
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            return "–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ—é –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É –∑–∞ 300.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif ff["gpu"] == "RX5700":
            ff["gpu"] = ""
            ff["balance"] += 500000
            ff["farm"] = 0.0
            ff["farming"] = False
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            return "–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ—é –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É –∑–∞ 500.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"

        elif ff["gpu"] == "RX6900XT":
            ff["gpu"] = ""
            ff["balance"] += 1500000
            ff["farm"] = 0.0
            ff["farming"] = False
            with open('json/' + str(id) + '.json', 'w') as f:
                f.write(json.dumps(ff, indent=4))
            return "–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ—é –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É –∑–∞ 1.500.000$\n–í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["balance"]) + "$"
    else:
        return '–£ –≤–∞—Å –Ω–µ—Ç –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã!'

def farmstatus(id):
    with open('json/' + str(id) + '.json') as f:
        ff = json.loads(f.read())
    return "–°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∞—à–µ–π –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã:" \
           "\n" \
           "\n&#12288;üìÑ –ù–∞–∑–≤–∞–Ω–∏–µ: " + farmcheck(id) + \
           "\n&#12288;üîã –î–æ–±—ã—á–∞: " + str(ff["farm"]) + " ‚Çø / 1 –º–∏–Ω" + \
           "\n&#12288;üí¥ –î–æ–±—ã—Ç–æ –≤ –±–∏—Ç–∫–æ–∏–Ω–∞—Ö: " + str(round(ff["farmed"],5)) + " ‚Çø" + \
           "\n&#12288;üíµ –î–æ–±—ã—Ç–æ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö: " + str(int(ff["farmed"] * 10000)) + " $" + \
           "\n" \
           "\nüìå–î–ª—è —Å–Ω—è—Ç–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '—Å–±–∏—Ç–∫–∏'" \
#–º–∞–≥–∞–∑–∏–Ω

def sellbtc(id):
    with open('json/' + str(id) + '.json') as f:
        ff = json.loads(f.read())

    if ff["farmed"] != 0.0:
        temp = str(round(ff["farmed"],5))

        ff["farmed"] = 0.0
        ff["btc"] += float(temp)

        with open('json/' + str(id) + '.json', 'w') as f:
            f.write(json.dumps(ff, indent=4))

        return "üí± –í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–ª–∏ " + temp + " –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç"\
        "\nüí¥ –í–∞—à –±–∞–ª–∞–Ω—Å: " + str(ff["btc"])  + " ‚Çø"
    else:
        return "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–∫–æ–ø–∏–≤—à–∏—Ö—Å—è ‚Çø"

def btcfarm(id):
    with open('json/' + str(id) + '.json') as f:
        ff = json.loads(f.read())
    ff["farmed"] += ff["farm"]
    ff["farm"] = round(ff["farm"],5)
    with open('json/' + str(id) + '.json', 'w') as f:
        f.write(json.dumps(ff, indent=4))
    threading.Thread(target=btcfarmstart, args=(id,)).start()
    return 0

def btcfarmstart(id):
    with open('json/' + str(id) + '.json') as f:
        ff = json.loads(f.read())
    threading.Timer(60.0, btcfarm, args=(id,)).start()
    return 0

def btcfarmreload():
    path = "json/"
    f=list(os.listdir(path))
    for i in range (len(f)):
        f[i] = str(f[i][:-5])
    for i in range (len(f)):
        id = f[i]
        btcfarmstart(id)
    return 0

def btcrateshow():
    return "üìà –ö—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç - 1000$ –∑–∞ 1‚Çø"

def btctousd(id, n):
    with open('json/' + str(id) + '.json') as f:
        ff = json.loads(f.read())
    if n == "–≤—Å–µ" or n == "–≤—Å—ë":
        n = round(ff["btc"],5)
    if float(n) <= ff["btc"] and float(n) > 0:
        temp = float(n) * 10000
        ff["btc"] -= float(n)
        ff["balance"] += int(float(n) * 10000)
        with open('json/' + str(id) + '.json', 'w') as f:
            f.write(json.dumps(ff, indent=4))
        return "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–ª–∏ " + str(n) + "‚Çø –≤ " + str(int(temp)) + "$\n" + bal(id)
    return "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏—Ç–∫–æ–∏–Ω–æ–≤ –∏–ª–∏ –≤—ã –≤–≤–µ–ª–∏ 0\n" + bal(id)

def usdtobtc(id, n):
    with open('json/' + str(id) + '.json') as f:
        ff = json.loads(f.read())
    if n == "–≤—Å–µ" or n == "–≤—Å—ë":
        n = int(ff["balance"] / 10000)
    temp = int(float(n) * 10000)  # –≤ $
    if temp <= ff["balance"] and float(n) > 0:
        ff["btc"] += round(float(n),5)
        ff["balance"] -= temp
        with open('json/' + str(id) + '.json', 'w') as f:
            f.write(json.dumps(ff, indent=4))
        return "–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ " + str(round(float(n),5)) + "‚Çø –∑–∞ " + str(temp) + "$\n" + str(bal(id))
    else:
        return "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –∏–ª–∏ –≤—ã –≤–≤–µ–ª–∏ 0\n" + bal(id)
# Bytecoin

# –¢–æ–ø
def sortbybal(str):
    a = int(str.split(":")[0])
    return a

def sortbybtc(str):
    a = float(str.split(":")[0])
    return a

def baltop():
    a=[]
    path = "json/"
    f=list(os.listdir(path))
    for i in range (len(f)):
        f[i] = str(f[i][0:-5])
    for i in f:
        id = i
        with open('json/' + str(id) + '.json') as f:
            ff = json.loads(f.read())
        if ff["balance"] != 0:
            if ff["nick"] != "":
                a.append(str(str(ff["balance"]) + ":" + "@id" + str(id) + " (" + ff["nick"] + ")"))
            else:
                user = vk.method("users.get", {"user_ids": id})
                a.append(str(str(ff["balance"]) + ":" + "@id" + str(id) + " (" + user[0]['first_name'] + ")"))
    a = sorted(a, key=sortbybal, reverse=True)
    for i in range(len(a)):
            a[i] = str(i+1) + ". " + str(a[i].split(":")[1]) + " | " + str(a[i].split(":")[0]) + "$"
    threading.Thread(target=reloadtop, args=()).start()
    global topbal
    topbal = "üìú –¢–æ–ø –ø–æ –±–∞–ª–∞–Ω—Å—É:\n\n" + "\n".join(a) + "\n\n–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"

def btctop():
    a=[]
    path = "json/"
    f=list(os.listdir(path))
    for i in range (len(f)):
        f[i] = str(f[i][0:-5])
    for i in f:
        id = i
        with open('json/' + str(id) + '.json') as f:
            ff = json.loads(f.read())
        if ff["btc"] != 0.0:
            if ff["nick"] != "":
                a.append(str(str(ff["btc"]) + ": " + "@id" + str(id) + " (" + ff["nick"] + ")"))
            else:
                user = vk.method("users.get", {"user_ids": id})
                a.append(str(str(ff["btc"]) + ": " + "@id" + str(id) + " (" + user[0]['first_name'] + ")"))
    a = sorted(a, key=sortbybtc, reverse=True)
    for i in range(len(a)):
            a[i] = str(i+1) + ". " + str(a[i].split(":")[1]) + " | " + str(round(float(a[i].split(":")[0]),5)) + "‚Çø"
    global topbtc
    topbtc = "üìú –¢–æ–ø –ø–æ –±–∏—Ç–∫–æ–∏–Ω–∞–º:\n\n" + "\n".join(a) + "\n\n–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"
    threading.Thread(target=reloadtopbtc, args=()).start()

def reloadtop():
    threading.Timer(300.0, baltop, args=()).start()

def reloadtopbtc():
    threading.Timer(300.0, btctop, args=()).start()

# –¢–æ–ø
print("[" + res() +"] ‚úÖ–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
log("system", "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

btcfarmreload()
baltop()
btctop()
# btcratestart()

while True:
    try:
        messages = vk.method("messages.getConversations", {"offset": 0, "count": 20, "filter": "unanswered"})
        if messages["count"] >= 1:
            id = messages["items"][0]["last_message"]["from_id"]
            body = messages["items"][0]["last_message"]["text"]

            c = 1
            path = "json/"
            u = os.listdir(path)
            for i in range(len(u)):
                u[i] = str(u[i][:-5])
                c += 1
            if str(id) not in u:
                vk.method("messages.send", {"peer_id": id,
                                            "message": prof(id) + "\n\nüíé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                            "keyboard": mainmenu.get_keyboard(),
                                            "random_id": random.randint(1, 2147483647)})

            with open('json/' + str(id) + '.json') as f:
                ff = json.loads(f.read())

            #if id in moders or id in admins:
            #if id in admins:
            allow = ["—Ä–µ–ø–æ—Ä—Ç", "–ø—Ä–æ—Ñ–∏–ª—å", "–ø—Ä–æ—Ñ", "unban"]
            if True:
                    if ff["banned"] == "NO" or body.lower().split(" ")[0] in allow:
                        if '—Ä–µ–ø–æ—Ä—Ç' in body.lower():
                            temp = str(body.lower()).split("—Ä–µ–ø–æ—Ä—Ç")
                            msg = temp[1]
                            if len(msg) > 1:
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": report(str(id), msg),
                                                            "random_id": random.randint(1, 2147483647)})
                            else:
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": "‚ö† –í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–π —Ä–µ–ø–æ—Ä—Ç!",
                                                            "random_id": random.randint(1, 2147483647)})
                            log(id, body)

                        # –ú–µ–Ω—é
                        elif body.lower() == "üè† –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                            vk.method("messages.send", {"peer_id": id,
                                                    "message": "üíé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                                    "keyboard": mainmenu.get_keyboard(),
                                                    "random_id": random.randint(1, 2147483647)})
                            log(id, body)
                        # –ú–µ–Ω—é

                        elif body.lower() == '–ø–∏–Ω–≥':
                            vk.method("messages.send", {"peer_id": id,
                                                        "message": "–ù–µ –ú–∏—à–∞,–≤—Å—ë —Ö—É–π–Ω—è! –î–∞–≤–∞–π –ø–æ –Ω–æ–≤–æ–π!",
                                                        "random_id": random.randint(1, 2147483647)})
                            log(id, body)

                        elif body.lower() == '—Ö–µ–ª–ø' or body.lower() == '–ø–æ–º–æ—â—å' or body.lower() == '–∫–æ–º–∞–Ω–¥—ã':
                            vk.method("messages.send", {"peer_id": id,
                                                        "message": help(),
                                                        "keyboard": mainmenu.get_keyboard(),
                                                        "random_id": random.randint(1, 2147483647)})
                            log(id, body)

                        elif body.lower() == '–ø—Ö–µ–ª–ø':
                            if id in admins or id in moders:
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": staffhelp(),
                                                            "random_id": random.randint(1, 2147483647)})
                            else:
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": "–í—ã –Ω–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä!",
                                                            "random_id": random.randint(1, 2147483647)})

                        elif body.lower() == '–∞–¥–º–∏–Ω–ø–∞–Ω–µ–ª—å':
                            if id in admins or id in moders:
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": "–ù—É —Ä–∞–∑ —Ç–µ–±–µ —Ç–∞–∫ —Ö–æ—á–µ—Ç—Å—è,—Ç–æ –Ω–∞",
                                                            "keyboard": adminmenu.get_keyboard(),
                                                            "random_id": random.randint(1, 2147483647)})
                            else:
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": "–í—ã –Ω–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä!",
                                                            "random_id": random.randint(1, 2147483647)})

                        elif body.lower() == '–ø—Ä–æ—Ñ–∏–ª—å' or body.lower() == '–ø—Ä–æ—Ñ':
                            vk.method("messages.send", {"peer_id": id,
                                                        "message": prof(id),
                                                        "keyboard": mainmenu.get_keyboard(),
                                                        "random_id": random.randint(1, 2147483647)})
                            log(id, body)

                        elif body.lower() == '–±–∞–ª–∞–Ω—Å' or body.lower() == '–±–∞–ª':
                            vk.method("messages.send", {"peer_id": id,
                                                        "message": bal(id),
                                                        "keyboard": mainmenu.get_keyboard(),
                                                        "random_id": random.randint(1, 2147483647)})
                            log(id, body)

                        elif body.lower() == '—Å—Ç–∞—Ç–∞':
                            vk.method("messages.send", {"peer_id": id,
                                                        "message": gstats(id),
                                                        "keyboard": mainmenu.get_keyboard(),
                                                        "random_id": random.randint(1, 2147483647)})
                            log(id, body)

                        elif body.lower() == "–∞–Ω–µ–∫–¥–æ—Ç":
                            vk.method("messages.send",
                                      {"peer_id": id, "message": getanekdot(), "random_id": random.randint(1, 2147483647)})
                            log(id, body)

                        elif str(body.lower()).split()[0] == '–∫—Å—Ç–∞—Ç–∞':
                            if len(str(body).split()) == 3:
                                temp = str(body).split(" ")
                                nick = temp[1]
                                idd = temp[2]
                                stats(nick, idd)
                                log(id, body)
                            else:
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": "‚ö†–î–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏ id Battle.net —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ü—Ä–∏–º–µ—Ä: –∫—Å—Ç–∞—Ç–∞ Vlad 214228‚ö†",
                                                            "random_id": random.randint(1, 2147483647)})

                        elif str(body.lower()).split()[0] == '–∫—Å—Ç–∞—Ç20':
                            if len(body.split(" ")) == 3:
                                temp = str(body).split(" ")
                                nick = temp[1]
                                idd = temp[2]
                                stats20(nick, idd)
                                log(id, body)
                            else:
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": "‚ö†–î–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –∏ id Battle.net —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ü—Ä–∏–º–µ—Ä: –∫—Å—Ç–∞—Ç20 Vlad 214228‚ö†",
                                                            "random_id": random.randint(1, 2147483647)})

                        elif str(body.lower()).split()[0] == '—Å–±–∞–ª':
                            if id in admins or id in moders:
                                if len(str(body).split()) == 2:
                                    temp = str(body).split(" ")
                                    val = temp[1]
                                    vk.method("messages.send", {"peer_id": id,
                                                            "message": cbal(id,val),
                                                            "random_id": random.randint(1, 2147483647)})
                                    log(id, body)
                            else:
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": "–í—ã –Ω–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä!",
                                                            "random_id": random.randint(1, 2147483647)})

                        elif str(body.lower()).split()[0] == '–¥–±–∞–ª':
                            if id in admins:
                                if len(str(body).split()) == 3:
                                    temp = str(body).split(" ")
                                    val = temp[2]
                                    idd = temp[1]
                                    vk.method("messages.send", {"peer_id": id,
                                                                "message": dbal(idd, val),
                                                                "random_id": random.randint(1, 2147483647)})
                                    log(id, body)
                            else:
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": "–í—ã –Ω–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
                                                            "random_id": random.randint(1, 2147483647)})

                        elif str(body.lower()).split()[0] == '–¥–ø—Ä–æ—Ñ':
                            if id in admins or id in moders:
                                if len(str(body).split()) == 2:
                                    temp = str(body).split(" ")
                                    idd = temp[1]
                                    vk.method("messages.send", {"peer_id": id,
                                                            "message": dprof(idd),
                                                            "random_id": random.randint(1, 2147483647)})
                                    log(id, body)
                            else:
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": "–í—ã –Ω–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä!",
                                                            "random_id": random.randint(1, 2147483647)})

                        elif str(body.lower()).split()[0] == '—Å–±–∏—Ç–∫':
                            if id in admins or id in moders:
                                if len(str(body).split()) == 2:
                                    temp = str(body).split(" ")
                                    val = temp[1]
                                    vk.method("messages.send", {"peer_id": id,
                                                            "message": cbtc(id, val),
                                                            "random_id": random.randint(1, 2147483647)})
                                    log(id, body)
                            else:
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": "–í—ã –Ω–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä!",
                                                            "random_id": random.randint(1, 2147483647)})

                        elif str(body.lower()).split()[0] == '—Å–ª–≤–ª':
                            if id in admins or id in moders:
                                if len(str(body).split()) == 2:
                                    temp = str(body).split(" ")
                                    val = temp[1]
                                    vk.method("messages.send", {"peer_id": id,
                                                            "message": clvl(id, val),
                                                            "random_id": random.randint(1, 2147483647)})
                                    log(id, body)
                            else:
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": "–í—ã –Ω–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä!",
                                                            "random_id": random.randint(1, 2147483647)})

                        elif str(body.lower()).split()[0] == '—Å–æ–ø—ã—Ç':
                            if id in admins or id in moders:
                                if len(str(body).split()) == 2:
                                    temp = str(body).split(" ")
                                    val = temp[1]
                                    vk.method("messages.send", {"peer_id": id,
                                                            "message": cexp(id, val),
                                                            "random_id": random.randint(1, 2147483647)})
                                    log(id, body)
                            else:
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": "–í—ã –Ω–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä!",
                                                            "random_id": random.randint(1, 2147483647)})

                        elif body.lower() == '–øo–ª–Ω–∞—è –Ω–∞–∫—Ä—É—Ç–∫–∞':
                            if id in admins or id in moders:
                                with open('json/' + str(id) + '.json') as f:
                                    ff = json.loads(f.read())
                                cbal(id, "1000000")
                                cbtc(id, "5000.0")
                                clvl(id, "5")
                                cexp(id, "500")
                                ff["bank"] = 1000000
                                ff["car"] = "Tesla model S"
                                ff["home"] = "–õ–∏—á–Ω—ã–π –æ—Å—Ç—Ä–æ–≤ —Å–æ —à–ª—é—Ö–∞–º–∏"
                                ff["phone"] = "iPhone 12 Gold Edition"
                                ff["gpu"] = "nVidia Tesla A100"
                                ff["farm"] = 0.1
                                with open('json/' + str(id) + '.json', 'w') as f:
                                    f.write(json.dumps(ff, indent=4))
                                vk.method("messages.send", {"peer_id": id,
                                                        "message": "–ù–∞–∫—Ä—É—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
                                                        "random_id": random.randint(1, 2147483647)})
                                log(id, body)
                            else:
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": "–í—ã –Ω–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä!",
                                                            "random_id": random.randint(1, 2147483647)})
                        elif body.lower() == 'o–±–Ω—É–ª–µ–Ω–∏–µ':
                            if id in admins or id in moders:
                                with open('json/' + str(id) + '.json') as f:
                                    ff = json.loads(f.read())
                                cbal(id, "1000")
                                cbtc(id, "0.0")
                                clvl(id, "1")
                                cexp(id, "0")
                                ff["bank"] = 0
                                ff["car"] = ""
                                ff["home"] = ""
                                ff["phone"] = ""
                                ff["gpu"] = ""
                                ff["farm"] = 0.0
                                with open('json/' + str(id) + '.json', 'w') as f:
                                    f.write(json.dumps(ff, indent=4))
                                vk.method("messages.send", {"peer_id": id,
                                                        "message": "–û–±–Ω—É–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!",
                                                        "random_id": random.randint(1, 2147483647)})
                                log(id, body)
                            else:
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": "–í—ã –Ω–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä!",
                                                            "random_id": random.randint(1, 2147483647)})

                        elif body.lower() == "–∏–≥—Ä—ã" or body.lower() == "‚¨Ö –∏–≥—Ä—ã":
                            vk.method("messages.send",
                                      {"peer_id": id,
                                       "message": games(),
                                       "keyboard": gamesmenu.get_keyboard(),
                                       "random_id": random.randint(1, 2147483647)})
                            log(id, body)

                        elif body.lower() == "–±–∏—Ç–∫–æ–∏–Ω—ã" or body.lower() == "–±–∏—Ç–∫–æ–∏–Ω" or body.lower() == "–±–∏—Ç–∫–∏" or body.lower() == "–±–∏—Ç–∫":
                            vk.method("messages.send",
                                      {"peer_id": id,
                                       "message": "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å\n" + bal(id),
                                       "keyboard": btcmenu.get_keyboard(),
                                       "random_id": random.randint(1, 2147483647)})
                            log(id, body)

                        elif str(body.lower()).split()[0] == '–∫–∞–∑–∏–Ω–æ' or str(body).split()[0] == '–∫–∞–∑–∏–∫':
                            if len(str(body).split()) == 2:
                                temp = str(body).split(" ")
                                amount = temp[1]
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": kaz(id, amount),
                                                            "keyboard": kazmenu.get_keyboard(),
                                                            "random_id": random.randint(1, 2147483647)})
                                log(id, body)
                            else:
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ!",
                                                            "keyboard": kazmenu.get_keyboard(),
                                                            "random_id": random.randint(1, 2147483647)})
                                log(id, body)

                        elif str(body.lower()).split()[0] == '–∫–∞–∑–∏–Ω–æ' or str(body).split()[0] == '–∫–∞–∑–∏–∫':
                            if len(str(body).split()) == 2:
                                temp = str(body).split(" ")
                                amount = temp[1]
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": kaz(id, amount),
                                                            "keyboard": kazmenu.get_keyboard(),
                                                            "random_id": random.randint(1, 2147483647)})
                                log(id, body)

                        elif str(body.lower()).split()[0] == '–º–æ–Ω–µ—Ç–æ—á–∫–∞' or str(body.lower()).split()[0] == '–º–æ–Ω–µ—Ç–∫–∞':
                            if len(str(body).split()) >= 3:
                                temp = str(body).split(" ")
                                side = temp[1]
                                amount = temp[2]
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": monetka(id, side , amount),
                                                            "keyboard": monetkasidemenu.get_keyboard(),
                                                            "random_id": random.randint(1, 2147483647)})
                                log(id, body)
                            else:
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": "–û–±—ã—á–Ω–∞—è –∏–≥—Ä–∞ –≤ –º–æ–Ω–µ—Ç–æ—á–∫—É\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É [–û—Ä–µ–ª –∏–ª–∏ –†–µ—à–∫–∞] –∏ —É–∫–∞–∂–∏—Ç–µ —Å—Ç–∫–∞–≤—É\n–ü—Ä–∏–º–µ—Ä: –ú–æ–Ω–µ—Ç–∫–∞ –æ—Ä–µ–ª 1000",
                                                            "keyboard": monetkasidemenu.get_keyboard(),
                                                            "random_id": random.randint(1, 2147483647)})

                        elif body.lower() == "–æ—Ä–µ–ª":
                            vk.method("messages.send",
                                      {"peer_id": id,
                                       "message": "–í—ã –≤—ã–±—Ä–∞–ª–∏ –û—Ä–ª–∞",
                                       "keyboard": monetkaorelmenu.get_keyboard(),
                                       "random_id": random.randint(1, 2147483647)})
                            log(id, body)
                        elif body.lower() == "—Ä–µ—à–∫–∞":
                            vk.method("messages.send",
                                      {"peer_id": id,
                                       "message": "–í—ã –≤—ã–±—Ä–∞–ª–∏ –†–µ—à–∫—É",
                                       "keyboard": monetkareshkamenu.get_keyboard(),
                                       "random_id": random.randint(1, 2147483647)})
                            log(id, body)

                        elif str(body.lower()).split()[0] == '—Å–Ω–∏–∫':
                            if len(str(body).split()) >= 2:
                                temp = str(body).split("—Å–Ω–∏–∫")
                                nickk = temp[1][1:]
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": nick(id, nickk),
                                                            "random_id": random.randint(1, 2147483647)})
                                log(id, body)
                            else:
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": "–í–∞—à –Ω–∏–∫ –ø—É—Å—Ç–æ–π\n–ü—Ä–∏–º–µ—Ä: '—Å–Ω–∏–∫ –í–ª–∞–¥–∏–º–∏—Ä –ü—É—Ç–∏–Ω'",
                                                            "random_id": random.randint(1, 2147483647)})

                        elif str(body.lower()).split()[0] == '–¥–Ω–∏–∫':
                            if id in admins:
                                if len(str(body).split()) == 3:
                                    temp = str(body).split(" ")
                                    idd = temp[1]
                                    nickk = temp[2]
                                    vk.method("messages.send", {"peer_id": id,
                                                                "message": dnick(idd, nickk),
                                                                "random_id": random.randint(1, 2147483647)})
                                    log(id, body)

                        elif str(body.lower()).split()[0] == '—Ä–∞–±–æ—Ç–∞—Ç—å':
                            if len(str(body).split()) == 2:
                                temp = str(body).split(" ")
                                val = temp[1]
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": work(str(id), val),
                                                            "random_id": random.randint(1, 2147483647)})
                                log(id, body)

                        elif body.lower() == 'users':
                            if id in admins or id in moders:
                                if len(str(body).split()) == 1:
                                    vk.method("messages.send", {"peer_id": id,
                                                                "message": ulist(),
                                                            "random_id": random.randint(1, 2147483647)})
                                    log(id, body)
                            else:
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": "–í—ã –Ω–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä!",
                                                            "random_id": random.randint(1, 2147483647)})
                        elif str(body.lower()).split()[0] == 'gban':
                            if id in admins:
                                if len(str(body).split()) == 3:
                                    temp = str(body).split(" ")
                                    idd = temp[1]
                                    rsn = temp[2]
                                    vk.method("messages.send", {"peer_id": id,
                                                                "message": giveban(id, idd, rsn),
                                                                "random_id": random.randint(1, 2147483647)})
                                    log(id, body)
                                else:
                                    vk.method("messages.send", {"peer_id": id,
                                                                "message": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n'gban {id} {–ø—Ä–∏—á–∏–Ω–∞}'",
                                                                "random_id": random.randint(1, 2147483647)})
                            else:
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": "–í—ã –Ω–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
                                                            "random_id": random.randint(1, 2147483647)})

                        elif str(body.lower()).split()[0] == 'unban':
                            if id in admins or id in moders:
                                if len(str(body).split()) == 2:
                                    temp = str(body).split(" ")
                                    idd = temp[1]
                                    vk.method("messages.send", {"peer_id": id,
                                                                "message": unban(idd),
                                                                "random_id": random.randint(1, 2147483647)})
                                    log(id, body)
                                else:
                                    vk.method("messages.send", {"peer_id": id,
                                                                "message": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n'unban {id}'",
                                                                "random_id": random.randint(1, 2147483647)})
                            else:
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": "–í—ã –Ω–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
                                                            "random_id": random.randint(1, 2147483647)})

                        elif body.lower() == 'staff' or body.lower() == '–∞–¥–º–∏–Ω—ã' or body.lower() == '–º–æ–¥–µ—Ä—ã' or body.lower() == '—Å—Ç–∞—Ñ—Ñ':
                            vk.method("messages.send", {"peer_id": id,
                                                        "message": staff(),
                                                        "random_id": random.randint(1, 2147483647)})
                            log(id, body)

                        elif body.lower() == '—Ñ–∏–ª—å–º':
                            vk.method("messages.send", {"peer_id": id,
                                                        "message": rfilm(),
                                                        "attachment": d,
                                                        "random_id": random.randint(1, 2147483647)})
                            log(id, body)

                        elif body.lower() == '—Ä–∞–±–æ—Ç—ã':
                            vk.method("messages.send", {"peer_id": id,
                                                        "message": works(id),
                                                        "keyboard": worksmenu.get_keyboard(),
                                                        "random_id": random.randint(1, 2147483647)})
                            log(id, body)

                        elif body.lower() == '—É—Ä–æ–≤–Ω–∏':
                            vk.method("messages.send", {"peer_id": id,
                                                        "message": levels(),
                                                        "keyboard": mainmenu.get_keyboard(),
                                                        "random_id": random.randint(1, 2147483647)})
                            log(id, body)

                        elif body.lower() == '–ª–æ–≥–∏':
                            if id in admins or id in moders:
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": glog(),
                                                            "random_id": random.randint(1, 2147483647)})
                                log(id, body)
                            else:
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": "–í—ã –Ω–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä!",
                                                            "random_id": random.randint(1, 2147483647)})

                        elif str(body.lower()).split()[0] == '–ø–µ—Ä–µ–¥–∞—Ç—å' or str(body.lower()).split()[0] == '–ø–µ—Ä–µ–≤–æ–¥':
                            if id in admins or id in moders:
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": "–ü–µ—Ä—Å–æ–Ω–∞–ª—É –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏",
                                                            "random_id": random.randint(1, 2147483647)})
                            else:
                                if len(str(body).split()) == 3:
                                    temp = str(body).split(" ")
                                    idd = temp[1]
                                    val = temp[2]
                                    vk.method("messages.send", {"peer_id": id,
                                                                "message": pay(id, idd, val),
                                                                "random_id": random.randint(1, 2147483647)})
                                    log(id, body)
                                else:
                                    vk.method("messages.send", {"peer_id": id,
                                                                "message": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n–ü–µ—Ä–µ–¥–∞—Ç—å {id} {—Å—É–º–º–∞}\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–∏–¥ {—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å}'",
                                                                "random_id": random.randint(1, 2147483647)})

                        elif str(body.lower()).split()[0] == '–±–∞–Ω–∫' or body.lower() == '–ë–∞–Ω–∫ –±–∞–ª–∞–Ω—Å':
                            temp = str(body.lower()).split(" ")
                            if len(temp) == 3:
                                type = temp[1]
                                amount = temp[2]
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": bank(id, type, amount),
                                                            "keyboard": bankmenu.get_keyboard(),
                                                            "random_id": random.randint(1, 2147483647)})
                            else:
                                with open('json/' + str(id) + '.json', encoding='utf-8') as f:
                                    ff = json.loads(f.read())
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": "üí≥ –ë–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞: " + str(ff["bank"]) + "$\n\n‚ö† –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n–ë–∞–Ω–∫ –ø–æ–ª–æ–∂–∏—Ç—å {—Å—É–º–º–∞}\n–∏–ª–∏\n–ë–∞–Ω–∫ —Å–Ω—è—Ç—å {—Å—É–º–º–∞}",
                                                            "keyboard": bankmenu.get_keyboard(),
                                                            "random_id": random.randint(1, 2147483647)})
                            log(id, body)

                        elif body.lower() == '–±–æ–Ω—É—Å':
                            vk.method("messages.send", {"peer_id": id,
                                                        "message": gbonus(id),
                                                        "keyboard": mainmenu.get_keyboard(),
                                                        "random_id": random.randint(1, 2147483647)})
                            log(id, body)


                        elif str(body.lower()).split()[0] == "–∏–¥":
                            if len(str(body).split()) == 2:
                                temp = str(body).split(" ")
                                idd = temp[1]
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": idsearch(idd),
                                                            "random_id": random.randint(1, 2147483647)})
                                log(id, body)
                            else:
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–∏–¥ {—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å}'",
                                                            "random_id": random.randint(1, 2147483647)})

                        # –ú–∞–≥–∞–∑–∏–Ω
                        elif body.lower() == '–º–∞–≥–∞–∑–∏–Ω' or body.lower() == "‚¨Ö –º–∞–≥–∞–∑–∏–Ω":
                            vk.method("messages.send", {"peer_id": id,
                                                        "message": shop(),
                                                        "keyboard": shopmenu.get_keyboard(),
                                                        "random_id": random.randint(1, 2147483647)})
                        elif body.lower() == '–ø—Ä–æ–¥–∞—Ç—å':
                            vk.method("messages.send", {"peer_id": id,
                                                        "message": sell(),
                                                        "keyboard": sellmenu.get_keyboard(),
                                                        "random_id": random.randint(1, 2147483647)})
                        elif body.lower() == '–º–∞—à–∏–Ω—ã':
                            vk.method("messages.send", {"peer_id": id,
                                                        "message": cars(),
                                                        "keyboard": carsmenu.get_keyboard(),
                                                        "random_id": random.randint(1, 2147483647)})
                        elif body.lower() == '—Ç–µ–ª–µ—Ñ–æ–Ω—ã':
                            vk.method("messages.send", {"peer_id": id,
                                                        "message": phones(),
                                                        "keyboard": phonemenu.get_keyboard(),
                                                        "random_id": random.randint(1, 2147483647)})
                        elif body.lower() == '–¥–æ–º–∞':
                            vk.method("messages.send", {"peer_id": id,
                                                        "message": homes(),
                                                        "keyboard": homemenu.get_keyboard(),
                                                        "random_id": random.randint(1, 2147483647)})

                        elif str(body.lower()).split()[0] == '–∫–º–∞—à–∏–Ω—É':
                            if len(str(body).split()) == 2:
                                temp = str(body).split(" ")
                                n = temp[1]
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": bcar(id, n),
                                                            "random_id": random.randint(1, 2147483647)})
                                log(id, body)
                            else:
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã!\n–ü—Ä–∏–º–µ—Ä: –∫–º–∞—à–∏–Ω—É 1",
                                                            "random_id": random.randint(1, 2147483647)})
                        elif body.lower() == '–ø–º–∞—à–∏–Ω—É':
                            vk.method("messages.send", {"peer_id": id,
                                                        "message": sellcar(id),
                                                        "random_id": random.randint(1, 2147483647)})
                            log(id, body)

                        elif str(body.lower()).split()[0] == '–∫—Ç–µ–ª':
                            if len(str(body).split()) == 2:
                                temp = str(body).split(" ")
                                n = temp[1]
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": bphone(id, n),
                                                            "random_id": random.randint(1, 2147483647)})
                                log(id, body)
                            else:
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã!\n–ü—Ä–∏–º–µ—Ä: –∫—Ç–µ–ª 1",
                                                            "random_id": random.randint(1, 2147483647)})
                        elif  body.lower() == '–ø—Ç–µ–ª':
                            vk.method("messages.send", {"peer_id": id,
                                                        "message": sellphone(id),
                                                        "random_id": random.randint(1, 2147483647)})
                            log(id, body)

                        elif str(body.lower()).split()[0] == '–∫–¥–æ–º':
                            if len(str(body).split()) == 2:
                                temp = str(body).split(" ")
                                n = temp[1]
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": bhome(id, n),
                                                            "random_id": random.randint(1, 2147483647)})
                                log(id, body)
                            else:
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã!\n–ü—Ä–∏–º–µ—Ä: –∫—Ç–µ–ª 1",
                                                            "random_id": random.randint(1, 2147483647)})
                        elif  body.lower() == '–ø–¥–æ–º':
                            vk.method("messages.send", {"peer_id": id,
                                                        "message": sellhome(id),
                                                        "random_id": random.randint(1, 2147483647)})
                            log(id, body)
                        # –ú–∞–≥–∞–∑–∏–Ω

                        elif  body.lower() == '–∏—Ö–µ–ª–ø':
                            vk.method("messages.send", {"peer_id": id,
                                                        "message": prophelp(),
                                                        "random_id": random.randint(1, 2147483647)})

                        # Bytecoin
                        elif  body.lower() == '–≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã':
                            vk.method("messages.send", {"peer_id": id,
                                                        "message": fshop(),
                                                        "keyboard": gpumenu.get_keyboard(),
                                                        "random_id": random.randint(1, 2147483647)})

                        elif str(body.lower()).split()[0] == '–∫–∫–∞—Ä—Ç—É':
                            if len(str(body).split()) == 2:
                                temp = str(body).split(" ")
                                n = temp[1]
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": bfarm(id, n),
                                                            "random_id": random.randint(1, 2147483647)})
                                log(id, body)
                            else:
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã!\n–ü—Ä–∏–º–µ—Ä: –∫–∫–∞—Ä—Ç—É 1",
                                                            "random_id": random.randint(1, 2147483647)})
                        elif body.lower() == '–ø–∫–∞—Ä—Ç—É':
                            vk.method("messages.send", {"peer_id": id,
                                                    "message": sfarm(id),
                                                    "random_id": random.randint(1, 2147483647)})
                            log(id, body)

                        elif body.lower() == "—Ñ–µ—Ä–º–∞":
                            vk.method("messages.send", {"peer_id": id,
                                                    "message": farmstatus(id),
                                                    "keyboard": farmmenu.get_keyboard(),
                                                    "random_id": random.randint(1, 2147483647)})
                            log(id, body)

                        elif body.lower() == "‚ôª –æ–±–Ω–æ–≤–∏—Ç—å":
                            vk.method("messages.send", {"peer_id": id,
                                                    "message": farmstatus(id),
                                                    "keyboard": farmmenu.get_keyboard(),
                                                    "random_id": random.randint(1, 2147483647)})
                            log(id, body)

                        elif body.lower() == "—Å–±–∏—Ç–∫–∏":
                            vk.method("messages.send", {"peer_id": id,
                                                    "message": sellbtc(id),
                                                    "random_id": random.randint(1, 2147483647)})
                            log(id, body)

                        elif body.lower() == "–±–∫—É—Ä—Å":
                            vk.method("messages.send", {"peer_id": id,
                                                    "message": btcrateshow(),
                                                    "random_id": random.randint(1, 2147483647)})
                            log(id, body)

                        elif str(body.lower()).split()[0] == '–ø–±–∏—Ç–∫':
                            if len(str(body).split()) == 2:
                                temp = str(body).split(" ")
                                n = temp[1]
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": btctousd(id, n),
                                                            "random_id": random.randint(1, 2147483647)})
                                log(id, body)
                            else:
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã!\n–ü—Ä–∏–º–µ—Ä: –ø–±–∏—Ç–∫ 1.25",
                                                            "random_id": random.randint(1, 2147483647)})

                        elif str(body.lower()).split()[0] == '–∫–±–∏—Ç–∫':
                            if len(str(body).split()) == 2:
                                temp = str(body).split(" ")
                                n = temp[1]
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": usdtobtc(id, n),
                                                            "random_id": random.randint(1, 2147483647)})
                                log(id, body)
                            else:
                                vk.method("messages.send", {"peer_id": id,
                                                            "message": "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã!\n–ü—Ä–∏–º–µ—Ä: –ø–±–∏—Ç–∫ 1.25",
                                                            "random_id": random.randint(1, 2147483647)})

                        # Bytecoin

                        elif body.lower() == '—Ç–æ–ø':
                            vk.method("messages.send", {"peer_id": id,
                                                    "message": "–ö–∞–∫–π —Ç–æ–ø –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º—Ç–æ—Ä–µ—Ç—å?"
                                                               "\n–ë–∞–ª—Ç–æ–ø - —Ç–æ–ø –ø–æ –±–∞–ª–∞–Ω—Å—É"
                                                               "\n–ë–∏—Ç–∫—Ç–æ–ø - —Ç–æ–ø –ø–æ –∫–æ–ª-–≤—É –±–∏—Ç–∫–æ–∏–Ω–æ–≤",
                                                    "keyboard": topmenu.get_keyboard(),
                                                    "random_id": random.randint(1, 2147483647)})
                            log(id, body)

                        elif body.lower() == '–±–∏—Ç–∫—Ç–æ–ø':
                            vk.method("messages.send", {"peer_id": id,
                                                    "message": topbtc,
                                                    "keyboard": topmenu.get_keyboard(),
                                                    "random_id": random.randint(1, 2147483647)})
                            log(id, body)

                        elif body.lower() == '–±–∞–ª—Ç–æ–ø':
                            vk.method("messages.send", {"peer_id": id,
                                                    "message": topbal,
                                                    "random_id": random.randint(1, 2147483647)})
                            log(id, body)


                        else:
                            vk.method("messages.send", {"peer_id": id,
                                                        "message": "–£–≤—ã, –Ω–æ —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ö —Å–ø–∏—Å–æ–∫ –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞–≤ '–∫–æ–º–∞–Ω–¥—ã'",
                                                        "keyboard": errormenu.get_keyboard(),
                                                        "random_id": random.randint(1, 2147483647)})
                    else:
                        vk.method("messages.send", {"peer_id": id,
                                                    "message": "‚ö† –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã",
                                                    "random_id": random.randint(1, 2147483647)})
            else:
                vk.method("messages.send", {"peer_id": id,
                                        "message": "‚ö† –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã! –ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è",
                                        "random_id": random.randint(1, 2147483647)})

    except BaseException as E:
        print(E)
        vk.method("messages.send",
                  {"peer_id": 419760643, "message": E, "random_id": random.randint(1, 2147483647)})
        log("system | ", E)